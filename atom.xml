<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Meadows of wild horses]]></title>
  <link href="http://rumidier.github.com/atom.xml" rel="self"/>
  <link href="http://rumidier.github.com/"/>
  <updated>2012-11-23T18:27:01+09:00</updated>
  <id>http://rumidier.github.com/</id>
  <author>
    <name><![CDATA[rumidier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phonegap]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/22/phonegap/"/>
    <updated>2012-11-22T19:06:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/22/phonegap</id>
    <content type="html"><![CDATA[<h1>Phonegap - iOS</h1>

<h2>사용 환경</h2>

<ul>
<li>모델명    :     MacBook Pro</li>
<li>모델 식별자:   MacBookPro8,1</li>
<li>메모리:           4 GB</li>
<li>Xcode: v4.5.2</li>
<li>기타:

<ul>
<li>homebrew</li>
<li>iTerm</li>
<li>Xcode Command Line Tools</li>
<li>OS X Mountain Lion</li>
<li>iPhone</li>
</ul>
</li>
</ul>


<h2>요구 환경</h2>

<ul>
<li>Xcode 4.5+</li>
<li>Xcode Command Line Tools</li>
<li>Intel-based computer with Mac OS X Lion or greater (10.7+)</li>
<li>Necessary for installing on device:

<ul>
<li>Apple iOS device (iPhone, iPad, iPod Touch) iOS developer certificate</li>
</ul>
</li>
</ul>


<h3>Xcode 설치</h3>

<p>Xcode는 <a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12">Mac App Store</a>에서 다운 받아 설치 할수 있습니다.</p>

<h3>Xcode Command Line Tools 설치</h3>

<h4>Xcode 실행후 > Xcode Preferences 선택 합니다.</h4>

<p><img src="https://lh6.googleusercontent.com/-9lGHtlIr6t0/UK3bfp3Kn9I/AAAAAAAAACc/7g0GBCw6L24/%25252FUsers%25252Fhancho%25252FPictures%25252Fxcode-line-tool-01.jpg" width="500" height="500" title="&#34;Xcode preferences 변경&#34;" alt="&#34;Xcode preferences 변경&#34;"></p>

<h4>Downloads->Components-> Command LIne Tools -> Install 클릭으로 설치 합니다.</h4>

<p><img src="https://lh3.googleusercontent.com/-rAUx02VExcY/UK3br16WT8I/AAAAAAAAACk/1b5_-hdFebk/%25252FUsers%25252Fhancho%25252FPictures%25252Fxcode-line-tool-02.jpg" width="500" height="500" title="&#34;Command Line Tools 설치&#34;" alt="&#34;Command Line Tools 설치&#34;"></p>

<p>설치가 끝나면 Terminal.app (iTerm)에서 커맨드 라인으로 작업을 할수가 있습니다. 자세한 사항은
<a href="http://docs.phonegap.com/en/2.2.0/guide_command-line_index.md.html#Command-Line%20Usage">Command-Line</a>에서 iOS 부분을 참고 하시면 됩니다.</p>

<h3>Apache Cordova 다운로드</h3>

<p>다운로드된 파일은 .zip 파일이므로 압축을 풀어서 사용하시면 됩니다.</p>

<ul>
<li>Cordova는 <a href="http://phonegap.com/download">Cordova-Down</a>에서 다운 받을수 있습니다.</li>
<li>다운 받은 폴더를 ~/CordovaLib-2.x.x 쓰기 편한 위치로 이동 시킵니다.</li>
</ul>


<h3>새로운 프로젝트 시작하기</h3>

<h4>bin 폴더 열기</h4>

<p>새로운 프로젝트를 생성하기 위해서는 ./create 파일을 실행 해야 합니다. create 파일은
lib/iOS/bin 폴더에 존재 합니다.</p>

<ul>
<li>lib/ios/bin 폴더로 직접 이동 해서 사용할수 있습니다.</li>
<li>~/CordovalLib-2.2/lib/ios/bin 폴더를 Terminal.app에 드래그 하면 bin 폴더로 바로 이동 할수 있습니다.</li>
</ul>


<h4>create 실행하기</h4>

<pre><code>$ ./create &lt;project_folder_path&gt; &lt;package_name&gt; &lt;project_name&gt;

$ mkdir project_folder_path/new_folder_name
$ ./create &lt;project_folder_path&gt; pheonegap.start start
$ cd ~/project_folder_path
$ ls

CordovaLib  cordova     start       start.xcodepro www
</code></pre>

<h3>Simulator 실행하기</h3>

<h4>project_name.xcodeproj 실행</h4>

<p>project_name.xcodeproj 파일을 클릭 하면 Xcode가 실행 됩니다. 실행후 컴파일 시간을 거친후 아래와 같이 <project_name> iPhone v.xx Simulator 선택 한후 Run(단축키 Command + R)을 실행 시켜 줍니다.</p>

<p><img src="https://lh5.googleusercontent.com/-4i-P73CwMQ8/UK3xPWma-gI/AAAAAAAAAC0/nmMVo0_Hlkk/%25252FUsers%25252Fhancho%25252FPictures%25252FSimulator-01.jpg" width="500" height="500" title="&#34;Simulrator 실행&#34;" alt="&#34;Simulrator 실행&#34;"></p>

<p>Run이 옳바르게 진행 되면 아래와 같은 iOS Simulator가 뜨게 됩니다.</p>

<p><img src="https://lh4.googleusercontent.com/-6MXX5k5upE0/UK3xWeU51mI/AAAAAAAAAC8/zSRgxkGKQoc/%25252FUsers%25252Fhancho%25252FPictures%25252FSimulator-02.jpg" width="500" height="500" title="&#34;Simulrator 실행 화면&#34;" alt="&#34;Simulrator 실행 화면&#34;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less tutorial]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/21/less-tutorial/"/>
    <updated>2012-11-21T12:44:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/21/less-tutorial</id>
    <content type="html"><![CDATA[<h2>Tutorial</h2>

<h3>Variables(변수)</h3>

<p>변수 선언은 &#8216;@&#8217; 연산자를 사용 합니다. 변수에 값을 정의 함으로써 광범위 하게 사용 할수 있습니다.</p>

<p>example.less</p>

<pre><code>@color: #4D926F

#header {
  color: @color;
}
h2 {
  color: @color;
}
</code></pre>

<p>compile.css</p>

<p>.css로 변환 하면 @color의 값으로 치환됩니다.</p>

<pre><code> #header {
   color: #4D926F;
 }
 h2 {
   color: #4D926F;
 }
</code></pre>

<h3>Mixins(믹스 인)</h3>

<p>믹스인은 클래스 처럼 사용 가능 하며 클래스에서 설정한 모든 속성을 포함시킬수 있습니다. 또한, 함수와 같이 인수를 설정 할수도 있습니다.</p>

<p>example.less</p>

<pre><code>.rounded-corners (@radius: 5px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  -ms-border-radius: @radius;
  -o-border-radius: @radius;
  border-radius: @radius;
}

#header {
  .rounded-corners;
}
#footer {
  .rounded-corners(10px);
}
</code></pre>

<p>compile.css</p>

<p>.rounded-coners를 선언 하였고 기본 인수는 @radius 5px입니다. #header는 기본 인수를 사용 하였고 #footer는 사용자 인수를 사용 하여서 10px이 되었습니다.</p>

<pre><code>.rounded-corners (@radius: 5px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  -ms-border-radius: @radius;
  -o-border-radius: @radius;
  border-radius: @radius;
}

#header {
  -webkt-boder-radius: 5px;
  -moz-border-radius: 5px;
  -ms-border-radius: 5px;
  -o-border-radius: 5px;
  border-radius: 5px;
}
#footer {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  -o-border-radius: 10px;
  border-radius: 10px;
}
</code></pre>

<h3>Nested Rules(중첩 규칙)</h3>

<p>선택기를 중첩하여 상속 할수 있으므로 긴 이름의 선택기를 중복으로 사용하지 않고도 명확하고 짧게 사용할수 있습니다.</p>

<p>example.less</p>

<pre><code>#header {
  h1{
    font-size: 26px;
    font-weight: bold;
  }
  p {
    font-size: 12px;
    a {
      text-decoration: none;
      &amp;:hover { border-width: 1px }
    }
  }
}
</code></pre>

<p>compile.css</p>

<p>.less 에서 쓰인 한번 쓰인 #heder 선택기가 중복으로 적용됩니다.</p>

<pre><code>#header h1 {
  font-size: 26px;
  font-weight: bold;
}    
#header p {
  font-size: 12px;
}
#header p a {
  text-decoration: none;
}
#header p a:hover { border-width: 1px }
</code></pre>

<h3>Functions &amp; Operations(함수와 연산)</h3>

<p>연산은 색이나 숫자에 대해 덧셈, 뺄셈, 나눗셈, 곱셈을 할수 있습니다. 속성 사이에 복잡한 연산은 CSS의 호환성을 위해
괄호 내에서만 실행 됩니다.</p>

<p>example.less</p>

<pre><code>@the-border: 1px;
@base-color: #111;
@red: #842210;

#header {
  color: @base-color * 3;
  border-left: @the-border;
  border-right: @the-border * 2;
}
#footer {
  color: @base-color + #003300;
  border-color: desaturate( @red, 10%);
}
</code></pre>

<p>compile.css</p>

<pre><code>#header {
  color: #333;
  border-left: 1px;
  border-right: 2px;
}    
#footer {
  color: #114411;
  border-color: #7d2717
}
</code></pre>

<h2>The Language</h2>

<h3>Variables(변수)</h3>

<p>LESS에서 변수는 실제로 상수로 기억되며 변수는 오직 한번만 정의 됩니다.</p>

<p>example-01.less</p>

<p>@nice-blue 변수를 선언하고 + 연산을 합니다.</p>

<pre><code>@nice-blue: #5B83AD;
@light-blue: (@nice-blue + #111);

#header { color: @light-blue; }
</code></pre>

<p>example-01.css</p>

<pre><code>#header { color: #6c94be; }
</code></pre>

<p>example-02.less - 변수에 다른 변수가 정의 가능합니다.</p>

<p>@var에 문자열 &#8216;fnord&#8217;는 @fnord로 치환 됩니다.</p>

<pre><code>@fnord: "I am fnord";
@var: 'fnord';
content: @@var;
</code></pre>

<p>example-02.css</p>

<pre><code>content: "I am fnord"
</code></pre>

<h3>Mixins</h3>

<p>Mixin은 이름을 사용해 선언 할수 있고 클래스 처럼 동작 합니다.</p>

<p>example-03.less</p>

<pre><code>.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
</code></pre>

<p>example-03.less</p>

<p>클래스 이름을 사용해 속성을 포함 시킬수있습니다.</p>

<pre><code>.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}

#menu a {
  color: #111;
  .bordered;
}
.post a {
  color: red;
  .bordered;
}
</code></pre>

<p>example-03.css</p>

<p>선언된 .bordered는 .css에서 보이지 않으며 치환 된채로 컴파일 됩니다.</p>

<pre><code>#menu a {
  color: #111;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
.post a {
  color: red;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
</code></pre>

<h3>Parametric Mixins</h3>

<p>example-04.less</p>

<p>클래스 처럼 믹스인 할수 있으며, 매개변수를 전달할수 있습니다.</p>

<pre><code>.border-radius (@radius) {
  border-radius: @radius;
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
}

#header {
  .border-radius(4px);
}
.button {
  .border-radius(6px);
}
</code></pre>

<p>example-04.css</p>

<p>.button의 6px, #header에 4px 값을 전달 받아 선언합니다.</p>

<pre><code>#header {
  border-radius: 4px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
}
.button {
  border-radius: 4px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
}
</code></pre>

<p>example-05.less</p>

<p>매개 변수가 유효한 mixin은 기본값을 가질수 있습니다</p>

<pre><code>.border-radius (@radius: 5px) {
  border-radius: @radius;
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
}
#header {
  .border-radius;
}
</code></pre>

<p>example-05.css</p>

<p>매개 변수 전달 없이 기본값을 사용 합니다.</p>

<pre><code>#header {
  border-radius: 5px;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
}
</code></pre>

<p>example-06.less</p>

<pre><code>.wrap () {
    text-wrap: wrap;
    white-space: pre-wrap;
    white-space: -moz-pre-wrap;
    word-wrap: break-word;
}
pre { .wrap }
</code></pre>

<p>example-06.css</p>

<pre><code>pre {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}
</code></pre>

<h4>The @arguments varialbe</h4>

<p>@arguments를 사용해서 개별적으로 파라미터를 사용 하지 않아도 됩니다.</p>

<p>example-07.less</p>

<p>2px, 5px 두개의 인수를 전달 하면 순서대로 @x, @y에 적용 됩니다.</p>

<pre><code>.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #000) {
  box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  -webkit-box-shadow: @arguments;
}

.box-shadow(2px, 5px);
</code></pre>

<p>example-07.css</p>

<p>0, 0값에서 전달된 2px, 5px값으로 치환 되었습니다.</p>

<pre><code>.box-shadow: 2px 5px 1px #000;
-moz-box-shadow: 2px 5px 1px #000;
-webkit-box-shadow: 2px 5px 1px #000;
</code></pre>

<h2>Pattern-matching and Guard expressions</h2>

<p>mixin을 선언하고 조건문으로 인자를 비교해 같은 이름의 .mixin중에 참인 .mixin을 적용 합니다.</p>

<p>변경 기본 문법</p>

<p>basic-01.less</p>

<pre><code>.mixin (@s, @color) {
    ….
}
.class {
  .mixin(@switch, #888);
}
</code></pre>

<p>basic-02.less</p>

<pre><code>.mixin (dark, @color) {
  color: darken(@color, 10%);
}
.mixin (light, @color) {
  color: lighten(@color, 10%);
}
.mixin (@), @color) {
  display: block;
}
</code></pre>

<p>example-08.less</p>

<p>.mixin이 3개가 선언 되었고 각 다른 조건문을 가지고 있습니다.</p>

<pre><code>.mixin (dark, @color) {
  color: darken(@color, 10%);
}
.mixin (light, @color) {
  color: lighten(@color, 10%);
}
.mixin (@_, @color) {
  display: block;
}

@switch: light;
.class {
  .mixin(@switch, #888);
}
</code></pre>

<p>example-08.css</p>

<p>호출시 조건문 light값을 충족하며 모든 값을 의미 하는 &#8216;@_&#8217;포함 하여 적용 됩니다.</p>

<pre><code>.class {
  color: #a2a2a2;
  display: black;
}
</code></pre>

<p>조건문으로 인수의 개수에 따라서 선택 할수도 있습니다.</p>

<pre><code>.mixin (@a) {
  color: @a;
}
.mixin (@a, @b) {
  color: fade(@a, @b);
}
</code></pre>

<h2>Guards</h2>

<p>가드는 값이나 변수의 개수가 아니라 식에 일치 시킵니다.</p>

<p>example-09.less</p>

<p>if/else 대신 when을 사용 합니다. @a값을 비교하여 적용 하며 인자가 하나이므로 color는 전체에 적용 됩니다.</p>

<pre><code>.mixin (@a) when (lightness(@a) &gt;= 50%) {
  background-color: black;
}
.mixin (@a) when (lightness(@a) &lt; 50%) {
  background-color: white;
}
.mixin (@a) {
  color: @a;
}
.class1 { .mixin(#ddd) }
.class2 { .mixin(#555) }
</code></pre>

<p>example-09.css</p>

<p>값에 비교에 따른 적용과 전체 적용된 color 입니다.</p>

<pre><code>.class1 {
  color: #ddd;
  background-color: black;
}
.class2 {
  color: #555;
  background-color: white;            
}
</code></pre>

<p>가드 안에서는 비교식(>, >=, =, =&lt;, &lt;)을 사용 할수있습니다.</p>

<p>basic.less</p>

<p>두개의 식은 같은 표현 입니다.</p>

<pre><code>.truth (@a) when (@a) { … }
.truth (@a) when (@a = true) { … }
</code></pre>

<p>example-10.less</p>

<p>아래의 식은 위에 basic.less값에 매치 되지 않습니다. 값이 &#8216;true&#8217;만 매치 됩니다.</p>

<pre><code>.class {
  .truth(40);
}
</code></pre>

<p>example-11.less</p>

<p>&#8216;or&#8217; 이중 조건은 &#8216;,&#8217;로 분류 됩니다. 작성된 조건의 범위를 벗어난 값을 호출시 컴파일 자체가 되지 않습니다.</p>

<pre><code>.mixin (@a) when (@a &gt; 10), (@a &lt; -10) { … }
</code></pre>

<p>example-12.less</p>

<p>인자의 값이 동등 한지 비교 가능 하며 대,소 또한 가능 합니다.</p>

<pre><code>@media: mobile;

.mixin (@a) when (@media = mobile) { … }
.mixin (@a) when (@media = desktop) { … }

.max (@a, @b) when (@a &gt; @b) { width: @a }
.max (@a, @b) when (@a &lt; @b) { width: @b }
</code></pre>

<p>매개변수가 number 인지 color인지 비교 할수 있습니다.</p>

<pre><code>.mixin (@a, @b: 0) when (isnumber(@b)) { … }
.mixin (@a, @b: black) when (iscolor(@b)) { … }
</code></pre>

<p>확인 가능한 is*형</p>

<ul>
<li>iscolor</li>
<li>isnumber</li>
<li>isstring</li>
<li>iskeyword</li>
<li>isurl</li>
<li>ispixel</li>
<li>ispercentage</li>
<li>isem</li>
</ul>


<p>추가 조건문 and는 숫자인지 비교하고 0보다 높은 값이어야 합니다.</p>

<pre><code>.mixin (@a) when (isnumber(@a)) and (@a &gt; 0) { … }
</code></pre>

<p>부정 조건문 not 조건이 0보다 크지 않을때 동작 합니다.</p>

<pre><code>.mixin (@b) when not (@b &gt; 0) { … }
</code></pre>

<h3>조건문</h3>

<p>Less</p>

<ul>
<li>= : 두 값이 같으면 참입니다.</li>
<li>not : 두 값이 같지 않으면 참입니다.</li>
<li>and : 모든 조건이 참이어야 합니다.</li>
<li>,   : 모든 조건 값중에 하나만 참이면 참입니다.</li>
</ul>


<h3>Nested rules</h3>

<p>example-13.css</p>

<p>&amp; 콤비네이터를 사용한 상속을 통해서 간결하게 만들수 있습니다. 아래는 .css파일 입니다. 이를 .less로 바꾸어 보겠습니다.</p>

<pre><code>#header { color: black; }
#header .navigation {
  font-size: 12px;
}
#header .logo {
  width: 300px;
}
#header .logo:hover {
  text-decoration: none;
}
</code></pre>

<p>example-13-01.less</p>

<p>.css에서 반복 되던 #header를 한번만 선언 할수 있습니다.</p>

<pre><code>#header {
  color: black;

  .navigation {
    font-size: 12px;
  }
  .logo {
    width: 300px;
    &amp;:hover { text-decoration: none; }
  }
}
</code></pre>

<p>example-13-02.less</p>

<p>위와 결과는 같지만 더 간결한 문법을 보입니다.</p>

<pre><code>#header { color: black;
  .navigation { font-size: 12px }
  .logo       { width: 300px;
    &amp;:hover   { text-decoration: none }
  }  
}
</code></pre>

<p>example-14.less</p>

<p>&amp; 콤비네이터를 사용한 또다른 형태 입니다.</p>

<pre><code>.bordered {
  &amp;.float { flat: left; }
  .top {
    margin: 5px;
  }
}
</code></pre>

<p>example-14.css</p>

<pre><code>.bordered.float {
  flat: left;
}
.bordered.top {
  margin: 5px;
}
</code></pre>

<h3>Advanced Usage of &amp;</h3>

<p>example-15.less</p>

<p>&amp; 또다른 사용 법입니다. 모든 셀렉터의 조합을 만들어 줄수 있습니다.</p>

<pre><code>.child, .sibling {
  .parent &amp; {
    color: black;
  }
  &amp; + &amp; {
    color: red;
  }
}
</code></pre>

<p>example-15.css</p>

<pre><code>.parent.child, .parent.sibling {
  color: black;
}

.child + .child,
.child + .sibling,
.sibling + .child,
.sibling + .sibling {
  color: red;
}
</code></pre>

<h3>Operations</h3>

<p>example-16.less</p>

<p>숫자, 색, 변수 또한 연산을 할수 있습니다.</p>

<pre><code>@base: 5%;
@filler: (@base * 2);
@other: (@bae + @filler);

color: (#888 / 4);
background-color: (@base-color + #111);
height: (100% / 2 + @filler);
</code></pre>

<p>example-16-01.less</p>

<pre><code>@var: (1px + 5); // @var: 6px
</code></pre>

<p>example-16-02.less</p>

<pre><code>width: ((@var + 5) * 2);
</code></pre>

<h3>Color functions</h3>

<ul>
<li><p>밝기 조절</p>

<p>  lighten(@color, 10%);
  darken(@color, 10%);</p></li>
<li><p>채도 조절</p>

<p>  saturate(@color, 10%);
  desaturate(@color, 10%);</p></li>
<li><p>투명도</p>

<p>  fadein(@color, 10%);
  fadeout(@color, 10%);
  fade(@color, 50%);</p></li>
<li><p>색장 조절</p>

<p>  spin(@color, 10);
  spin(@color, -10);</p>

<h1></h1></li>
<li><p>@color1, 과 @color2 혼합된 값을 반환 합니다. @weight는 기본값을 의미 합니다.</p>

<p>  mix(@color1, @color2, @weight);</p></li>
<li><p>@color1 > 50% luma 일경우 @darkcolor 를 아니면 @lightcolor를 반환 합니다.
  contrast(@color1, @darkcolor, @lightcolor;);</p></li>
</ul>


<p>exampl1-17.less</p>

<pre><code>@base: #f04615;

.class {
  color: saturate(@base, 5%);
  background-color: spin(lighten(@base, 25%), 8);
}
</code></pre>

<p>색정보 알아내기</p>

<pre><code>hue(@color);
saturation(@color);
lightness(@color);
red(@color);
green(@color);
blue(@color);
alpha(@color);
luma(@color);
</code></pre>

<p>새로운 색 구하기</p>

<p>@new는 @old의 색을 유지하면서 자신의 채도 및 밝기를 정의</p>

<pre><code>@new: hsl(hue(@old), 45%, 90%);
</code></pre>

<h3>Math functions</h3>

<p>&#8216;2&#8217;를 반환 합니다</p>

<pre><code>round(1.67);
</code></pre>

<p>&#8216;3&#8217;을 반환 합니다.</p>

<pre><code>ceil(2.4);
</code></pre>

<p>&#8216;2&#8217;를 반환 합니다.</p>

<pre><code>floor(2.6);
</code></pre>

<p>퍼센티지 구하기</p>

<p>0.5는 50%를 반환 합니다.</p>

<pre><code>percentage(0.5)
</code></pre>

<h3>Namespaces</h3>

<p>example-18.less</p>

<p>Namespace를 가지고 Mixin 에서 선택 할수 있습니다. 다음은 #bundle 에서 .button을 Mixin 하는 방법 입니다.</p>

<pre><code>#bundle {
  .button () {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &amp;:hover { background-color: white }
  }
  .tab { … }
  .citaion { … }
}

#header a {
  color: orange;
  #bundle &gt; .button;
}
</code></pre>

<p>compile.css</p>

<p>.tab, .citaion은 적용 되지 않습니다.</p>

<pre><code>#header a {
  color: orange;
  display: black;
  border: 1px solid black;
  background-color: grey;
}
#header a:hover {
  background-color: #ffffff;
}
</code></pre>

<h3>Scope</h3>

<p>example-19.less</p>

<p>{ }안에서 변수 재선언시 지역적으로 사용 됩니다.</p>

<pre><code>@var: red;

#page {
  @var: white;
  #header {
    color: @var;
  }
}
#footer {
  color: @var;
}
</code></pre>

<h3>Comments</h3>

<p>example-20.less</p>

<p>여러줄 주석 입니다. .css 변환시 에도 남아 있게 됩니다.</p>

<pre><code>/* Hello, I'm a CSS-style comment */
.class { color: black }
</code></pre>

<p>example-21.less</p>

<p>한줄 주석입니다 .css변환시 보이지 않습니다.</p>

<pre><code>// Hi, I'm a silent comment, I won't show up in your CSS
.class { color: white }
</code></pre>

<h3>Importing</h3>

<p>example-22.less</p>

<p>기존에 만들어진 .less 파일과 .css 파일을 불러서 사용 할수 있습니다.</p>

<pre><code>@import "lib.less";
@import "lib";

@import "lib.css";
</code></pre>

<h3>String interpolation</h3>

<p>example-23.less</p>

<p>문자열을 &#8220;&#8221; 안에 불러 올수 있습니다.</p>

<pre><code>@base-url: "http://assets.fnord.com";
background-image: url("@{base-url}/images/bg.png");
</code></pre>

<h3>Selector Interpolation</h3>

<p>example-25.less</p>

<p>셀렉터 이름도 불러 올수 있습니다.</p>

<pre><code>@name: blocked;
.@{name} {
  color: black;
}
</code></pre>

<p>example-25.css</p>

<pre><code>.blocked {
  color: black;
}
</code></pre>

<h3>Escaping</h3>

<p>example-24.less</p>

<pre><code>.class {
  filter: ~"ms:alwaysHasItsOwnSyntax.For.Stuff()";
}
</code></pre>

<p>example-24.css</p>

<pre><code>.class {
  filter: ms:alwaysHasItsOwnSyntax.For.Stuff();
}
</code></pre>

<h3>JavaScript evaluation</h3>

<p>example-26.less</p>

<pre><code>@var: `"hello".toUpperCase() + '!'`;
</code></pre>

<p>compile</p>

<pre><code>@var: "HELLO!";
</code></pre>

<p>example-27.less</p>

<pre><code>@str: "hello";
@var: ~`"@{str}".toUpperCase() + '!'`;
</code></pre>

<p>compile</p>

<pre><code>@var: HELLO!;
</code></pre>

<p>JavaScript환경에 액세스 할수 있습니다.</p>

<pre><code>@height:`document.body.clientHeight`;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Script 시작하기]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/19/coffee-script/"/>
    <updated>2012-11-19T12:23:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/19/coffee-script</id>
    <content type="html"><![CDATA[<h3>사용 환경</h3>

<ul>
<li>모델명    :     MacBook Pro</li>
<li>모델 식별자:     MacBookPro8,1</li>
<li>프로세서 이름:   Intel Core i5</li>
<li>프로세서 속도:    2.3 GHz</li>
<li>메모리:         4 GB</li>
<li>기타: homebrew, iTerm</li>
</ul>


<h2>CoffeeScript 설치</h2>

<p>CoffeeScript - CoffeeScript is a little language that compiles into JavaScript</p>

<h3>CoffeeScript 공식 사이트</h3>

<p>CoffeeScript 공식 사이트 주소는 <a href="http://coffeescript.org/">CoffeeScript 사이트</a>
입니다.</p>

<h3>npm - coffee-script 설치를 위한 패키지 매니저</h3>

<p>coffee-script를 다운 받기 위해서는 npm이 필요 하고 별도로 설치 해야 하며
npm 설치를 위한 파일은 아래의 링크에서 다운로드 받습니다.</p>

<p><a href="http://nodejs.org/download/">npm 다운로드</a></p>

<h3>node-v.8.x.x.pkg 설치</h3>

<p>개인 OS에 맞는 파일을 선택해 다운 받고 설치 합니다. 다음은 Mac 에서의
.pkg 실행시 첫화면과 마지막 화면 입니다.</p>

<p><img src="https://lh5.googleusercontent.com/-eUicOa-fhtQ/UKXCFOGz27I/AAAAAAAAACE/9LBj6Kzdn-8/%25252FUsers%25252Fhancho%25252FPictures%25252Fnode-01.jpg" width="500" height="500" title="&#34;node.pkg 설치 시작&#34;" alt="&#34;node.pkg 설치 시작&#34;">
<img src="https://lh5.googleusercontent.com/-Smr4TJfxMgI/UKXEkWDOYWI/AAAAAAAAACM/soEN5qpthGg/%25252FUsers%25252Fhancho%25252FPictures%25252Fnode-02.jpg" width="500" height="500" title="&#34;node.pkg 설치 끝&#34;" alt="&#34;node.pkg 설치 끝&#34;"></p>

<h3>coffee-script 설치</h3>

<p>npm을 사용해 coffee-script를 설치해 줍니다.</p>

<pre><code>hancho@hanjoui-MacBook-Pro:~$ sudo npm install -g coffee-script
Password:
npm http GET https://registry.npmjs.org/coffee-script
npm http 304 https://registry.npmjs.org/coffee-script
/usr/local/bin/coffee -&gt; /usr/local/lib/node_modules/coffee-script/bin/ coffee
/usr/local/bin/cake -&gt; /usr/local/lib/node_modules/coffee-script/bin/cake
coffee-script@1.4.0 /usr/local/lib/node_modules/coffee-script
</code></pre>

<h2>CoffeeScript 사용방법</h2>

<ul>
<li><p>CoffeeScript 시작하기</p>

<p>  테스트를 위한 폴더를 생성후 style.less 파일을 만듭니다.</p>

<pre><code> $ mkdir Coffee-Start
 $ cd Coffee-Start
 $ touch style.coffee
</code></pre></li>
<li><p>style.coffee 작성</p></li>
</ul>


<p>coffee가 동작하는지 확인 하기 위해 테스트 파일를 작성합니다.</p>

<figure class='code'><figcaption><span>style.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">fill</span> <span class="o">=</span> <span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">liquid</span> <span class="o">=</span> <span class="s2">&quot;coffee&quot;</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="s2">&quot;Filling the #{container} with #{liquid}...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span> <span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;cup&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>.coffee -> .js 변환하기</p>

<p>.coffee 파일 작성후 .js 파일로 변환합니다. 파일명은 style.coffee의 style.js로 변환됩니다.</p>

<pre><code>  $ coffee --compile style.coffee
  $ ls

  style.coffee style.js
</code></pre></li>
<li><p>.coffee -> .js 지켜보기</p>

<p>.coffee -> .js 파일로 변화 하며 &#8211;watch 옵션으로 style.coffee 파일 내용이 갱신(저장) 될때마다
.js 파일로 변환 시켜 주게 됩니다. 종료는 Ctrl + C 키로 할수있습니다.</p>

<pre><code>  $ coffee --watch --compile style.coffee
  11:55:26 - compiled style.coffee
</code></pre></li>
<li><p>coffeescript - .coffee 확인 하기</p></li>
</ul>


<p>.html 파일 내에서 .js 파일로 변환 없이 .coffee를 검사 할수있습니다.</p>

<figure class='code'><figcaption><span>coffee.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://jashkenas.github.com/coffee-script/extras/coffee-script.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/coffeescript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">fill</span> <span class="o">=</span> <span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">liquid</span> <span class="o">=</span> <span class="s2">&quot;coffee&quot;</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="s2">&quot;Filling the #{container} with #{liquid}...&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">alert</span> <span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;cup&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>coffeescript - .js 확인하기</li>
</ul>


<p>.html 파일 내에서 변환된 .js 내용을 검사 할수있습니다.</p>

<figure class='code'><figcaption><span>coffee.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://jashkenas.github.com/coffee-script/extras/coffee-script.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fill</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fill</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">liquid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">liquid</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">liquid</span> <span class="o">=</span> <span class="s2">&quot;coffee&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Filling the &quot;</span> <span class="o">+</span> <span class="nx">container</span> <span class="o">+</span> <span class="s2">&quot; with &quot;</span> <span class="o">+</span> <span class="nx">liquid</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;cup&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass 시작하기]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/15/sass-start/"/>
    <updated>2012-11-15T16:40:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/15/sass-start</id>
    <content type="html"><![CDATA[<p>Sass - Syntactically Awesome Stylesheets</p>

<h2>사용 환경</h2>

<hr />

<ul>
<li>모델명    :     MacBook Pro</li>
<li>모델 식별자:   MacBookPro8,1</li>
<li>프로세서 이름:   Intel Core i5</li>
<li>프로세서 속도:  2.3 GHz</li>
<li>메모리:           4 GB</li>
<li>기타: homebrew, iTerm</li>
</ul>


<h2>Sass 설치</h2>

<hr />

<h3>Sass 공식 사이트</h3>

<p>Sass의 공식 사이트 주소는 <a href="http://sass-lang.com/docs.html">Sass 사이트</a>입니다.</p>

<h3>gem - Sass 설치를 위한 패키지 매니저</h3>

<p>gem을 사용하려면 Ruby가 설치되어 있어야 합니다.
<a href="http://octopress.org/docs/setup/rvm/">gem 설치가이드</a></p>

<h3>RVM 패키지 설치</h3>

<p>ruby를 설치 하기전 ruby를 관리해주는 RVM 을 설치 합니다.
처음 실행 시키면 &#8216;q&#8217;를 누르라고 나옵니다.
&#8216;q&#8217; 입력후 설치 시간이 좀 걸리게 되며 아래와 같은 내용이
나올때까지 기다려야 합니다.</p>

<pre><code>$ curl -L https://get.rvm.io | bash -s stable --ruby

ruby-1.9.3-p327 - #extracting ruby-1.9.3-p327 to /Users/hancho/.rvm/src/ruby-1.9.3-p327
ruby-1.9.3-p327 - #extracted to /Users/hancho/.rvm/src/ruby-1.9.3-p327
ruby-1.9.3-p327 - #configuring
ruby-1.9.3-p327 - #compiling
ruby-1.9.3-p327 - #installing 
Removing old Rubygems files...
Installing rubygems-1.8.24 for ruby-1.9.3-p327 ...
Installation of rubygems completed successfully.
Saving wrappers to '/Users/hancho/.rvm/bin'.
ruby-1.9.3-p327 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
ruby-1.9.3-p327 - #importing default gemsets (/Users/hancho/.rvm/gemsets/)
Install of ruby-1.9.3-p327 - #complete 
Creating alias default for ruby-1.9.3-p327.
Recording alias default for ruby-1.9.3-p327.
Creating default links/files
Saving wrappers to '/Users/hancho/.rvm/bin'.

* To start using RVM you need to run `source /Users/hancho/.rvm/scripts/rvm`
in all your open shell windows, in rare cases you need to reopen all shell windows.
</code></pre>

<h3>Ruby 설치</h3>

<p>RVM이 설치가 정상적으로 완료되면 rvm 을 사용해 루비를 설치해 줍니다.</p>

<pre><code>$ rvm install 1.9.3

A RVM version 1.16.20 (stable) is installed yet 1.14.5 (stable) is loaded.
Please do one of the following:
* 'rvm reload'
* open a new shell
* 'echo rvm_auto_reload_flag=1 &gt;&gt; ~/.rvmrc' # for auto reload with msg.
* 'echo rvm_auto_reload_flag=2 &gt;&gt; ~/.rvmrc' # for silent auto reload.
</code></pre>

<h4>ruby 버전별 사용</h4>

<p>ruby 버전을 최신으로 설정해 줍니다.</p>

<pre><code>$ rvm use 1.9.3

Using /Users/hancho/.rvm/gems/ruby-1.9.3-p327
</code></pre>

<h4>ruby 최신 버전 적용</h4>

<p>현재 보다 최신 버전이 있으면 최신 버전으로 적용 시켜 주게 됩니다.
현재 사용하고 있는 버전이 최신이 아니었다면 위의 $ rvm use 1.x.x 사용
하는게 좋습니다.</p>

<pre><code>$ rvm rubygems latest

Removing old Rubygems files...
Installing rubygems-1.8.24 for ruby-1.9.3-p327 ...
Installation of rubygems completed successfully.
</code></pre>

<h3>Sass 설치</h3>

<p>RVM과 Ruby가 정상적으로 설치되면 sass를 설치 할수 있습니다.</p>

<pre><code>$ gem install sass
</code></pre>

<h2>Sass 사용방법</h2>

<ul>
<li><p>Sass 따라 해보기</p>

<p>  테스트 폴더를 생성후 style.scss 파일을 만듭니다.</p>

<pre><code> $ mkdir Sass-Start
 $ cd Sass-Start
 $ touch style.scss
</code></pre></li>
<li><p>style.scss 파일 작성</p></li>
</ul>


<p>sass가 동작 하는지 확인 하기 위해 테스트 파일를 작성합니다.</p>

<figure class='code'><figcaption><span>style.scss  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.fakeshadow</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="err">{</span>
</span><span class='line'>    <span class="n">style</span><span class="o">:</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="err">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">4px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span> <span class="m">#888</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">right</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">2px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>.scss -> .css 변환하기</li>
</ul>


<p>작성된 .scss 파일을 .css 파일로 변환합니다. 다음은 .scss 파일이 변경
되었을시 재입력 없이 변경 되는 명령어 입니다.  .scss 파일이 변경되는
시점에(저장시) .css 변환을 자동으로 해주므로 수정 사항이 많을시 사용해
주면 좋습니다.</p>

<pre><code>$ sass --watch style.scss:style.css
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LESS 시작하기]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/14/less-start/"/>
    <updated>2012-11-14T17:37:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/14/less-start</id>
    <content type="html"><![CDATA[<h2>LESS - The Dynamic Stylesheet Language</h2>

<h2>사용 환경</h2>

<ul>
<li>모델명    :     MacBook Pro</li>
<li>모델 식별자:   MacBookPro8,1</li>
<li>프로세서 이름:   Intel Core i5</li>
<li>프로세서 속도:  2.3 GHz</li>
<li>메모리:           4 GB</li>
<li>기타: homebrew, iTerm</li>
</ul>


<h2>LESS 설치</h2>

<h3>LESS 공식 사이트</h3>

<p>LESS의 공식 사이트 주소는 <a href="http://lesscss.org/#usage">LESS 사이트</a>입니다.</p>

<h3>npm - LESS 설치를 위한 패키지 매니저</h3>

<p>LESS를 다운 받기 위해서는 npm이 필요 하고 별도로 설치를 해주어야 하며
npm 설치를 위한 필요한 파일은 아래의 링크에서 다운로드 받을수 있습니다.</p>

<p><a href="http://nodejs.org/download/">npm 다운로드</a></p>

<h3>node-v.8.x.x.pkg 설치</h3>

<p>개인 OS에 맞는 파일을 선택하여 다운 받았다면 이를 설치 합니다. 다음은 Mac 에서의
.pkg 실행시 첫화면과 마지막 화면 입니다.</p>

<p><img src="https://lh5.googleusercontent.com/-eUicOa-fhtQ/UKXCFOGz27I/AAAAAAAAACE/9LBj6Kzdn-8/%25252FUsers%25252Fhancho%25252FPictures%25252Fnode-01.jpg" width="500" height="500" title="&#34;node.pkg 설치 시작&#34;" alt="&#34;node.pkg 설치 시작&#34;">
<img src="https://lh5.googleusercontent.com/-Smr4TJfxMgI/UKXEkWDOYWI/AAAAAAAAACM/soEN5qpthGg/%25252FUsers%25252Fhancho%25252FPictures%25252Fnode-02.jpg" width="500" height="500" title="&#34;node.pkg 설치 끝&#34;" alt="&#34;node.pkg 설치 끝&#34;"></p>

<h3>LESS 설치</h3>

<p>정상적으로 패키지 설치가 완료 되면 npm을 사용해 LESS를 설치 합니다.</p>

<pre><code>$ npm install -g less
</code></pre>

<h2>LESS 사용방법</h2>

<ul>
<li><p>LESS 시작하기</p>

<p>  테스트 폴더를 생성하고 style.less 파일을 만듭니다.</p>

<pre><code> $ mkdir Less-Start
 $ cd Less-Start
 $ touch style.less
</code></pre></li>
<li><p>style.less 작성</p></li>
</ul>


<p>less가 동작하는지 확인 하기 위한 테스트 파일를 작성합니다.</p>

<figure class='code'><figcaption><span>style.less  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="k">@color</span><span class="o">:</span> <span class="nf">#4D926F</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">#header</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="o">@</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="o">@</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>.less -> .css 미리보기</p>

<p>  .less 작성후 변환하기전 .css 미리 보기를 할수 있습니다.</p>

<pre><code> $ lessc styles.less

 #header {
   color: #6cc4be;
 }
</code></pre></li>
<li><p>.less -> .css 변환하기</p>

<p>  작성이 완료되면 .less 파일을 .css 파일로 변환하여 줍니다.</p>

<pre><code> $ lessc styles.less &gt; styles.css
 $ ls

 styles.less styles css
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime text2 vim mode]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/12/sublime-text2-vim-mode/"/>
    <updated>2012-11-12T12:21:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/12/sublime-text2-vim-mode</id>
    <content type="html"><![CDATA[<h3>vim mode 경로</h3>

<p>sublime text2 vim mode 설정하기</p>

<p>http://www.sublimetext.com/docs/2/vintage.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net::Twitter]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/24/net-twitter/"/>
    <updated>2012-09-24T18:06:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/24/net-twitter</id>
    <content type="html"><![CDATA[<p>Net::Twitter 설치시 실패</p>

<p>서버에 모듈을 설치 하려고 하는데 자꾸 실패 하게 되었다.
ssl도 있고 Dev도 있는데 왜??
그건 libssl-dev가 없어서 였다</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[month-split]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/18/month-split/"/>
    <updated>2012-09-18T15:30:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/18/month-split</id>
    <content type="html"><![CDATA[<p>user의 아이디를 가지고 elapsed_at 의 내용을 가져 오게 된다
이 값은 2012-09-09 21:00:00 형식으로 되어 있으며
2012 와 09 를 기준으로 값을 따로 가지게 하여년도별 월 횟수를나타나게
해주었다 하지만 필요 없어 지움&#8230;</p>

<p>controll</p>

<pre><code>$cond = {} if %$cond;

my $user_id;
if ($id) {
    $user_id = $user_info-&gt;id;
}
else {
    $user_id = $c-&gt;user-&gt;id;
}

$cond-&gt;{'me.user_id'} = $user_id;

my %attr            = ( 'order_by' =&gt; { -desc =&gt; 'me.elapsed_at' } );

my $activity_search = $c-&gt;model('BikeMeDB')-&gt;resultset('Activity')-&gt;search($cond, \%attr);
my $activities      = [ $activity_search-&gt;all ];
my $activity_data   = {};

for my $activity (@{ $activities }) {
    my $year;
    my $month;

    my $elapsed = $activity-&gt;elapsed_at;
    $year       = $activity-&gt;elapsed_at-&gt;year;
    $month      = $activity-&gt;elapsed_at-&gt;month;

    my @split_elapsed = split('-', $activity-&gt;elapsed_at, 3);

    $activity_data-&gt;{$split_elapsed[0]}{$split_elapsed[1]}++;
}

my $year  = $c-&gt;req-&gt;params-&gt;{year};
my $month = $c-&gt;req-&gt;params-&gt;{month};

my $max_year  = '00000';
my $max_month = '00';

if ($year &amp;&amp; $month) {
    $max_year  = $year;
    $max_month = $month;
}
else {
    foreach my $year (keys %$activity_data) {
        if ($year gt $max_year) {
            $max_year = $year;
        }
        else {
            $max_month = '00';
            last;
        }

        foreach my $month (keys $activity_data-&gt;{$year}) {
            $max_month = $month if $month gt $max_month;
        }
    }
}

$cond = {} if %$cond;
$cond-&gt;{'me.user_id'} = $user_id;
$cond-&gt;{'me.elapsed_at'} = { 'like', "%"."$max_year"."-"."$max_month"."%" };

$activity_search = $c-&gt;model('BikeMeDB')-&gt;resultset('Activity')-&gt;search($cond, \%attr);
</code></pre>

<p>view - 년-월</p>

<pre><code>[% FOEACH year IN activity_data.keys.reverse %]
    [% FOREACH month IN activity_data.$year.keys.sort.reverse %]
  &lt;div class="btn"&gt;
    &lt;a href="[% c.uri_for('/activities') %]?year=[% year %]&amp;month=[% month %]" class="btn btn-primary"&gt;[% year %]-[% month %] ([% activity_data.$year.$month %])&lt;/a&gt;
&lt;/div&gt;
    [% END %]
[% END %]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst-test-code]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/11/catalyst-test-code/"/>
    <updated>2012-09-11T18:46:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/11/catalyst-test-code</id>
    <content type="html"><![CDATA[<h2>Web - Catalyst Test Code 작성</h2>

<p>Catalyst로 웹을 구축 하던중 테스트 코드를 작성을 부여 받았습니다. 테스트 코드를 진행 하기 위한 모듈을 적습니다.</p>

<h2>모듈</h2>

<p><a href="https://metacpan.org/module/Test::More">Test::More</a></p>

<p>기본 적이 펄 테스트 코드 문법을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/Catalyst::Test#res-request-...-">Catalyst::Test</a></p>

<p>content, response 페이지 정보를 얻어 올수 있습니다.</p>

<p><a href="ihttps://metacpan.org/module/HTTP::Response">HTTP::Response</a></p>

<p>response 정보등을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/URI">URI</a></p>

<p>response 정보등을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/HTTP::Request::Common">HTTP::Request::Common</a></p>

<p>Get POST 등을 구현 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/CGI::Simple::Cookie">CGI::Simple::Cookie</a></p>

<p>로그인 인증 관련 세션 처리를 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/HTTP::Cookies">HTTP::Cookies</a></p>

<p>CGI::Simple::Cookie로 쿠키 관련 재설정이 반복 되며 번거로울때
파일로 저장하여 사용할수 있다.</p>

<pre><code>## 첫번째 t 파일에서 login 하고 cookie 를 저장해둔다. pull/109설명중.
my $cookies = HTTP::Cookies-&gt;new(file =&gt; 't/.cookies');
# res &amp; res
$cookies-&gt;extract_cookies($res);
$cookies-&gt;save;

## 다른 t 파일에서는..
my $cookies = (split(/:/, HTTP::Cookies-&gt;new(file =&gt; 't/.cookies')-&gt;as_string))[1];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[export_csv]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/25/export-csv/"/>
    <updated>2012-07-25T19:01:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/25/export-csv</id>
    <content type="html"><![CDATA[<p>목차</p>

<ol>
<li>CSV 출력 준비</li>
<li>View 생성</li>
</ol>


<h3>CSV 출력 준비</h3>

<p>선택된 내역을 출력 하기 위한 버튼을 추가한다.</p>

<p>root/templates/bootstrap/src/deposit/index.tt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;a class="btn btn-primary" id="do_export"&gt;출력&lt;/a&gt;</span></code></pre></td></tr></table></div></figure>


<p>선택된 내역 js처리</p>

<p>root/static/scripts/list.js</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $('#do_export').click(function() {
</span><span class='line'>    var selected_charges = [];
</span><span class='line'>
</span><span class='line'>    $('#charge_list tr').filter(':has(:checkbox:checked)').each(function(){
</span><span class='line'>      if($(this).attr('id') !== undefined)
</span><span class='line'>        selected_charges.push($(this).attr('id'))
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    location.href = '/deposit/export/' + selected_charges;
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<p>Sil/Web/Don/Controller/Deposit.pm</p>

<p>선택된 승인 내역을 CSV로 출력하기 위하여
모듈 - <a href="https://metacpan.org/module/Catalyst::View::Download::CSV">Catalyst::View::Download::CSV</a>을 사용 하였습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sub export :Local CaptureArgs(1) {
</span><span class='line'>    my ( $self, $c, $id ) = @_;
</span><span class='line'>    my @target_ids = split ',', $id;
</span><span class='line'>    
</span><span class='line'>    my @charges;
</span><span class='line'>    
</span><span class='line'>    push @charges, ['제목', '청구자', '금액', '영수증날짜'];
</span><span class='line'>    
</span><span class='line'>    foreach my $charge($c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search({id =&gt; { -in =&gt; \@target_ids }})-&gt;all) {
</span><span class='line'>        push @charges, [ $charge-&gt;title, $charge-&gt;user-&gt;user_name, $charge-&gt;amount, $charge-&gt;usage_date];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (@charges) {
</span><span class='line'>        $c-&gt;stash-&gt;{'csv'} = { 'data' =&gt; [ @charges ] };
</span><span class='line'>        $c-&gt;flash-&gt;{messages} = 'Success Exported.';
</span><span class='line'>
</span><span class='line'>    } else {
</span><span class='line'>        $c-&gt;flash-&gt;{messages} = 'Export Failed.';
</span><span class='line'>    }
</span><span class='line'>    $c-&gt;forward('Sil::Web::Don::View::Download::CSV');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>View 생성</h2>

<p>View는 script_web_don_create view로 생성한다.</p>

<p>list/Sil/Web/Don/View/Download/CSV.pm을 생성 완료.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package Sil::Web::Don::View::Download::CSV;
</span><span class='line'>use Moose;
</span><span class='line'>use namespace::autoclean;
</span><span class='line'>
</span><span class='line'>extends 'Catalyst::View::Download::CSV';
</span><span class='line'>
</span><span class='line'>=head1 NAME
</span><span class='line'>
</span><span class='line'>Sil::Web::Don::View::Download::CSV - Catalyst View
</span><span class='line'>
</span><span class='line'>=head1 DESCRIPTION
</span><span class='line'>
</span><span class='line'>Catalyst View.
</span><span class='line'>
</span><span class='line'>=head1 AUTHOR
</span><span class='line'>
</span><span class='line'>ja3ck
</span><span class='line'>
</span><span class='line'>=head1 LICENSE
</span><span class='line'>
</span><span class='line'>This library is free software. You can redistribute it and/or modify
</span><span class='line'>it under the same terms as Perl itself.
</span><span class='line'>
</span><span class='line'>=cut
</span><span class='line'>
</span><span class='line'>__PACKAGE__-&gt;meta-&gt;make_immutable;
</span><span class='line'>
</span><span class='line'>1;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DB_Password_Hash]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/25/db-password-hash/"/>
    <updated>2012-07-25T16:41:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/25/db-password-hash</id>
    <content type="html"><![CDATA[<h2>DB Password HASH</h2>

<p><a href="https://metacpan.org/module/DBIx::Class::EncodedColumn">DBIx::Class::EncodedColumn</a></p>

<p>기본 입력값 입력시 sha(&#8216;password&#8217;)사용 하여 암호화 할수 있도록 한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO `user` VALUES (2,'rum_user','rum_user@mail.com',sha('Password'),localtime ,localtime);</span></code></pre></td></tr></table></div></figure>


<p>MyWeb::ResultBase.pm에 EncodedColumn 추가하여 준다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__PACKAGE__-&gt;load_components(qw/
</span><span class='line'>    EncodedColumn
</span><span class='line'>    InflateColumn::DateTime
</span><span class='line'>    TimeStamp
</span><span class='line'>/);</span></code></pre></td></tr></table></div></figure>


<p><a href="https://metacpan.org/module/Catalyst::Plugin::Authentication">Catalyst::Plugin::Authentication</a></p>

<p>my_web.conf 파일에 플러그인 설정 추가
pawword_type 설정시 디폴트로 SHA-1이 적용되지만
명시적으로 password_hash_type을 정의 하여 준다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Plugin::Authentication&gt;
</span><span class='line'>    &lt;default&gt;
</span><span class='line'>        password_type      hashed
</span><span class='line'>        password_hash_type SHA-1
</span><span class='line'>        user_model         DonDB::User
</span><span class='line'>        class              SimpleDB
</span><span class='line'>    &lt;/default&gt;
</span><span class='line'>&lt;/Plugin::Authentication&gt;</span></code></pre></td></tr></table></div></figure>


<h3>설정 추가 참고 자료</h3>

<p><a href="https://metacpan.org/module/Catalyst::Authentication::Credential::Password">Catalyst::Authentication::Credential::Password</a></p>

<p><a href="https://metacpan.org/module/Digest#new">Digest</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Templet_br]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/24/templet-br/"/>
    <updated>2012-07-24T14:28:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/24/templet-br</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don-Change-space]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/24/don-change-space/"/>
    <updated>2012-07-24T14:20:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/24/don-change-space</id>
    <content type="html"><![CDATA[<h2>Sil::Web::Don 변경</h2>

<p>Sil::Schema는 Sil의 공용 스키마가 아닌데도 불구 하고 그렇게 보일수도 있는
상태 이다 이를 바꾸기 위해서
Sil::Don::Schema로 바꾼다. 이는 Sil의 Don만의 스키마라고
명시 해주는것과 같다.</p>

<p>변경전</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lib
</span><span class='line'>`-- Sil
</span><span class='line'>    |-- Schema
</span><span class='line'>    |   |-- Result
</span><span class='line'>    |   |   |-- Charge.pm
</span><span class='line'>    |   |   `-- User.pm
</span><span class='line'>    |   `-- ResultBase.pm
</span><span class='line'>    |-- Schema.pm
</span><span class='line'>    `-- Web
</span><span class='line'>        |-- Don
</span><span class='line'>        |   |-- Controller
</span><span class='line'>        |   |   |-- Deposit.pm
</span><span class='line'>        |   |   |-- List.pm
</span><span class='line'>        |   |   |-- Login.pm
</span><span class='line'>        |   |   |-- Logout.pm
</span><span class='line'>        |   |   `-- Root.pm
</span><span class='line'>        |   |-- Model
</span><span class='line'>        |   |   `-- DonDB.pm
</span><span class='line'>        |   `-- View
</span><span class='line'>        |       |-- Bootstrap.pm
</span><span class='line'>        |       `-- Download
</span><span class='line'>        |           `-- CSV.pm
</span><span class='line'>        `-- Don.pm</span></code></pre></td></tr></table></div></figure>


<p> 변경후</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> lib
</span><span class='line'>└── Sil
</span><span class='line'>    └── Don
</span><span class='line'>        ├── Schema
</span><span class='line'>        │   ├── Result
</span><span class='line'>        │   │   ├── Charge.pm
</span><span class='line'>        │   │   └── User.pm
</span><span class='line'>        │   └── ResultBase.pm
</span><span class='line'>        ├── Schema.pm
</span><span class='line'>        ├── Web
</span><span class='line'>        │   ├── Controller
</span><span class='line'>        │   │   ├── Deposit.pm
</span><span class='line'>        │   │   ├── List.pm
</span><span class='line'>        │   │   ├── Login.pm
</span><span class='line'>        │   │   ├── Logout.pm
</span><span class='line'>        │   │   └── Root.pm
</span><span class='line'>        │   ├── Model
</span><span class='line'>        │   │   └── DonDB.pm
</span><span class='line'>        │   └── View
</span><span class='line'>        │       ├── Bootstrap.pm
</span><span class='line'>        │       └── Download
</span><span class='line'>        │           └── CSV.pm
</span><span class='line'>        └── Web.pm</span></code></pre></td></tr></table></div></figure>


<h2>경로명 변경</h2>

<p>의존성이 걸려있는 모든 내역들을 grep 명령어로 찾아 아래와 같이 수정해 주었다.</p>

<p>변경전</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Sil::Schema::Result::Charge
</span><span class='line'>Sil::Schema::Result::User
</span><span class='line'>Sil::Schema::ResultBase
</span><span class='line'>Sil::Schema
</span><span class='line'>
</span><span class='line'>Sil::Web::Don::Controller::Deposit
</span><span class='line'>Sil::Web::Don::Controller::List
</span><span class='line'>Sil::Web::Don::Controller::Login
</span><span class='line'>Sil::Web::Don::Controller::Logout
</span><span class='line'>Sil::Web::Don::Controller::Root
</span><span class='line'>Sil::Web::Don::Model::DonDB
</span><span class='line'>Sil::Web::Don::View::Bootstrap
</span><span class='line'>Sil::Web::Don::View::Download::CS
</span><span class='line'>Sil::Web::Don</span></code></pre></td></tr></table></div></figure>


<p>변경후</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Sil::Don::Schema::Result::Charge
</span><span class='line'>Sil::Don::Schema::Result::User
</span><span class='line'>Sil::Don::Schema::ResultBase
</span><span class='line'>Sil::Don::Schema
</span><span class='line'>
</span><span class='line'>Sil::Don::Web::Controller::Deposit
</span><span class='line'>Sil::Don::Web::Controller::List
</span><span class='line'>Sil::Don::Web::Controller::Login
</span><span class='line'>Sil::Don::Web::Controller::Logout
</span><span class='line'>Sil::Don::Web::Controller::Root
</span><span class='line'>Sil::Don::Web::Model::DonDB
</span><span class='line'>Sil::Don::Web::View::Bootstrap
</span><span class='line'>Sil::Don::Web::View::Download::CS
</span><span class='line'>Sil::Don::Web</span></code></pre></td></tr></table></div></figure>


<h2>변경후 문제점</h2>

<p>내용 수정후 서버 실행이 app.psgi에서 모듈을 찾지 못한다고 하였다.
이유는 Sil_web_Don.conf 파일명을 수정 해주지 않았기에 발생한 문제였다.
경로명이 바뀌엇듯이 파일명도 교체 해주어야 한다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don release]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/23/don-release/"/>
    <updated>2012-07-23T18:49:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/23/don-release</id>
    <content type="html"><![CDATA[<h2>Donnenwa Open</h2>

<ol>
<li>DNS 요구</li>
<li>Apache2 설정</li>
<li>supervisior 설정</li>
<li>확인</li>
</ol>


<h3>DNS 요구</h3>

<p>도메인 네임을 받아 현진이(서버)에 연결해 주어야 하지만
브롬튼에 도메인이 정의가 되있기 때문에 SE님에게 요구하면 된다.(나만되는겨)</p>

<h3>Apache2 설정</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh rumidier@bu….접속
</span><span class='line'>$ cd /etc/apache2/
</span><span class='line'>$ cd sites-available
</span><span class='line'>$ vi user.site.kr (작성)
</span><span class='line'>$ cd ../
</span><span class='line'>$ cd sites-enable
</span><span class='line'>$ ln -s 타킷-경로
</span><span class='line'>$ ~/etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>supervisior 설정</h3>

<p>슈퍼 바이저는 서버가 죽었다 다시 살아 났을시 수동이 아닌 자동으로 서버를 뛰워주기 위해 필요한 기능이다.</p>

<p>돈내놔는 carton을 사용하고 plackup으로 뛰우며 플라넥스와는 다르게 worker의 갯수가 존재 하지 않는다. 포트 설정은 아파치에서 해준 포트를 명시 해준후 디렉토리와 유저, 환경 등록을 해주면 끝이 난다.
환경경로는 carton과 plackup 경로도 알아야 하는거 같다(이 부분은 설명이 더 필요)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /etc
</span><span class='line'>$ vi supervisord.conf
</span><span class='line'>
</span><span class='line'>[program:Donnenwa] 
</span><span class='line'>command=/usr/local/bin/carton exec -Ilib -- /home/USER Donnenwa/local/bin/plackup -Ilib -a /home/USER/Donnenwa
</span><span class='line'>app.psgi --host 127.0.0.1 --port You_port(ex:3000)  
</span><span class='line'>directory=/home/User/Donnenwa 
</span><span class='line'>user=USER 
</span><span class='line'>environment=PATH=/usr/local/bin:/usr/bin:/bin,HOME=/home/USER
</span><span class='line'>stdout_logfile=/home/USER/logs/stdout 
</span><span class='line'>stderr_logfile=/home/USER/logs/stderr 
</span><span class='line'>
</span><span class='line'>$ sudo supervisorctl
</span><span class='line'>supervisor&gt; status
</span><span class='line'>….
</span><span class='line'>supervisor&gt; update
</span><span class='line'>supervisor&gt; exit
</span><span class='line'>$ 서버 실행 확인 끝</span></code></pre></td></tr></table></div></figure>


<h3>더 물어 봐야 할것</h3>

<ol>
<li>supervisor의 셋팅을 무엇을 참조 하는가?</li>
<li>도메인 등록은 어떻게 하는가?</li>
<li>apach2 설정은 어떻게 하는가?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side-function]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/side-function/"/>
    <updated>2012-07-12T14:03:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/side-function</id>
    <content type="html"><![CDATA[<h2>Action - approval, refuse</h2>

<p><a href="https://gist.github.com/3096325">approval</a></p>

<p><a href="https://gist.github.com/3096321">refuse</a></p>

<p>Approval은 청구 목록에 대하여 승인 기능을
refuse는 청구 목렉에 대하여 거부 기능을 가지게 된다.</p>

<p>승인 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기 리스트 상태, 거부 리스트 상태
에서 활성화가 되고 action을 취할수 있게 한다.</p>

<p>거부 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기 리스트 상태, 승인 리스트 상태
에서 활성화가 되고 action 을 취할수 있게 한다.</p>

<p>/list/view/user_id</p>

<p>아래와 같이 id 값과 함께 전달 할수 있다.</p>

<pre><code>&lt;a href="[% c.uri_for('/list/approval', charge.id) %]" class="btn btn-primary"&gt;승인&lt;/a&gt;
&lt;a href="[% c.uri_for('/list/refuse', charge.id) %]" class="btn btn-primary"&gt;거부&lt;/a&gt;
</code></pre>

<p>CaputreArgs(1) 옵션으로 $id 값(들)을 받을수 있게 된다.</p>

<pre><code>sub approval :Local :CaptureArgs(1) {
    my ( $self, $c, $id ) = @_;
    my @target_ids = split ',', $id;

sub refuse :Local :CaptureArgs(1) {
my ( $self, $c, $id ) = @_;
my @target_ids = split ',', $id;
</code></pre>

<p>@target_id의 모든 값(들)을 status값이 2 or 3로 업데이트 한다.
업데이트는 검색을 한 값들을 대상으로 update를 하게 된다.</p>

<pre><code>$ vi root/templates/default/src/list

# 승인
my $approval = $c-&gt;model('MyApp_DB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in
        =&gt; \@target_ids } })-&gt;update_all({ status =&gt; '2' });
# 거부
my $refuse = $c-&gt;model('MyApp_DB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in
        =&gt; \@target_ids } })-&gt;update_all({ status =&gt; '3' });
</code></pre>

<p>flash기능으로 messages값을 전달하여 조건에 맞을시 메세지를 출력 시키도록 한다.(/list/index.tt 참고)
조건은 approval, refuse기능이 정상 작동 되었는지를 검사 하게 된다.</p>

<pre><code>if ($query_status) {
    $c-&gt;flash-&gt;{messages} = 'Success message.';
}
else {
    $c-&gt;flash-&gt;{messages} = 'No status Item.';
}
</code></pre>

<p>템플릿에 쓰일 status값과 함께 전체 목록으로 redirect 시키도록 한다.</p>

<pre><code>$c-&gt;stash-&gt;{status} = '2'; #상태에 맞는 status값
$c-&gt;res-&gt;redirect($c-&gt;uri_for('/list'));
</code></pre>

<h2>Action - delete</h2>

<p><a href="https://gist.github.com/3096329">delete</a></p>

<p>승인 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기, 거부, 수정 상태
 에서 활성화가 되고 action을 취할수 있게 한다.</p>

<pre><code>$ vi root/templates/default/src/list
&lt;a href="[% c.uri_for('/list/delete', charge.id) %]" class="btn btn-primary"&gt;삭제&lt;/a&gt;
</code></pre>

<p>다른 기능과 같이 CaptureArgs(1)를 받는다.</p>

<pre><code>sub delete :Local :CaptureArgs(1) {
my ( $self, $c, $id ) = @_;
my @target_ids = split ',', $id;
</code></pre>

<p>다른 기능과 달리 update_all 이 아닌 delete_all를 통하여 내용을 삭제 한다.</p>

<pre><code>my $charge = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in =&gt; \@target_ids } })-&gt;delete_all;
</code></pre>

<h2>CPAN</h2>

<p><a href="https://metacpan.org/module/DBIx::Class::Manual::DocMap">DBIx::Class::Manual::DocMap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list-edit]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/list-edit/"/>
    <updated>2012-07-12T13:56:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/list-edit</id>
    <content type="html"><![CDATA[<h2>청구 내역 수정</h2>

<p><a href="https://gist.github.com/3095912">List-edit-action</a></p>

<p>수정 되어야할 $edit_id를 받을수 있어햐 한다.</p>

<pre><code>sub edit :Local :CaptureArgs(1) {
my ( $self, $c, $edit_id ) = @_;
</code></pre>

<p>수정할 폼을 제출 했을때 업데이트 동작 혹은 정보 출력을 하여야 한다.</p>

<pre><code>if ($c-&gt;req-&gt;method eq 'POST') {
    my @messages;

    push @messages, 'amount is invaild' if ($c-&gt;req-&gt;params-&gt;{amount} !~ /^\d+$/);
    push @messages, 'title is required' unless ($c-&gt;req-&gt;params-&gt;{title});

    if (@messages) {
    $c-&gt;flash(
        messages =&gt; @messages,
        comment  =&gt; $c-&gt;req-&gt;params-&gt;{comment},
        title    =&gt; $c-&gt;req-&gt;params-&gt;{title},
        amount   =&gt; $c-&gt;req-&gt;params-&gt;{amount},
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for("/list/view/$c-&gt;req-&gt;params-&gt;{charge_id}"));
    }

    my $time = strftime "%Y-%m-%d %H:%M:%S", localtime;
    my %row = (
    id         =&gt; $c-&gt;req-&gt;params-&gt;{charge_id},
    amount     =&gt; $c-&gt;req-&gt;params-&gt;{amount},
    user       =&gt; $c-&gt;req-&gt;params-&gt;{charge_user},
    title      =&gt; $c-&gt;req-&gt;params-&gt;{title},
    comment    =&gt; $c-&gt;req-&gt;params-&gt;{comment},
    updated_on =&gt; "$time",
    );
    $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;update_or_create(\%row);

    $c-&gt;res-&gt;redirect($c-&gt;uri_for("/list/view/$row{id}"));
}
else {
    my $editer = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;find($edit_id);

    $c-&gt;stash(
    editer =&gt; $editer,
    );
}
}
</code></pre>

<p><a href="https://gist.github.com/3095922">List-edit.tt</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list-write]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/list-write/"/>
    <updated>2012-07-12T13:49:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/list-write</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3095879">List-write.tt</a>
<a href="https://gist.github.com/3095901">List-write-action</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list-view]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/list-view/"/>
    <updated>2012-07-12T13:41:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/list-view</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3095846">List-view-action</a>
<a href="https://gist.github.com/3095858">List-view.tt</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/11/list/"/>
    <updated>2012-07-11T23:06:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/11/list</id>
    <content type="html"><![CDATA[<h2>청구 목록 페이지</h2>

<p><a href="https://gist.github.com/3095682">List.pm - index</a></p>

<p><a href="https://gist.github.com/3095679">/list/index.tt</a></p>

<h2>List Controller - Query option</h2>

<p>등록 날짜 역순 출력을 위한 내림 차수 옵션을 준다.</p>

<pre><code>my %attr  = ( 'order_by' =&gt; { -desc =&gt; 'me.id' } );

my $total_charge;
my %cond    = ();
</code></pre>

<p>현재 가르켜야 할 페이지 정보가 없다면 1페이지로 하게 한다.</p>

<pre><code>my $page    = $c-&gt;req-&gt;params-&gt;{page};
$attr{page} = $page || 1;
</code></pre>

<p>status 옵션이 정의 되지 않았다면 전체(대기/승인/거부) 검색을 할수 있게 한다.</p>

<pre><code>my $status  = $c-&gt;req-&gt;param("status") || $c-&gt;stash-&gt;{"status"} || '0'; #수정 필요
</code></pre>

<p>status 옵션 없으면 전체 있으면 상태 검색 할수 있게 한다.</p>

<pre><code>%cond         = ( status =&gt; $status ) if $status;
$total_charge = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search(\%cond, \%attr);
</code></pre>

<p>Data::Pageset활용 하여 페이징 할수 있다.</p>

<pre><code>my $page_info =
Data::Pageset-&gt;new(
    {
    ( map { $_ =&gt; $total_charge-&gt;pager-&gt;$_ } qw/entries_per_page total_entries current_page/ ),
    mode =&gt; "slide",
    pages_per_set =&gt; 10,
    }
);

$c-&gt;stash(
    lists   =&gt; [ $total_charge-&gt;all ],
    status  =&gt; $status,
    pageset =&gt; $page_info,
);
}
</code></pre>

<h2>List - View</h2>

<p>성공 혹은 실패 메세지 출력을 할수 있게 한다.</p>

<pre><code>[% IF messages %]
&lt;div class="alert fade in"&gt;
&lt;button class="close" data-dismiss="alert"&gt;&amp;times;&lt;/button&gt;
[% messages %]
&lt;/div&gt;
[% END %]
</code></pre>

<p>탭 등록으로 원하는 상태의 값들만 보여 줄수 있게 한다.</p>

<pre><code>&lt;div class="container-fluid"&gt;
  &lt;div class="row-fluid"&gt;
&lt;div class="span2"&gt;
  &lt;ul class="nav nav-tabs nav-stacked"&gt;
    &lt;li class="active"&gt;&lt;a href="http://rumidier.github.com/list"&gt;전체&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://rumidier.github.com/list?status=1"&gt;대기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://rumidier.github.com/list?status=2"&gt;승인&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://rumidier.github.com/list?status=3"&gt;거부&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>현재 경로가 어떻게 되는지 확인 할수 있도록 한다.</p>

<pre><code>&lt;div class="span10"&gt;
  &lt;ul class="breadcrumb"&gt;
    &lt;li&gt;목록
        &lt;span class="divider"&gt;/&lt;/span&gt;
    &lt;/li&gt;      
    &lt;li class="active"&gt;
    [% IF status == "1" %]
        &lt;b&gt; 대기 &lt;/b&gt;
    [% ELSIF status == "2" %]
        &lt;b&gt; 승인 &lt;/b&gt;
    [% ELSIF status == "3" %]
        &lt;b&gt; 거부 &lt;/b&gt;
    [% ELSE %]
        &lt;b&gt; 전체 &lt;/b&gt;
    [% END %]     
    &lt;/li&gt;
  &lt;/ul&gt;
</code></pre>

<h2>CPAN</h2>

<p><a href="https://metacpan.org/module/Data::Pageset">Data::Pageset</a></p>

<p><a href="https://metacpan.org/module/DBIx::Class::Manual::DocMap">DBIx::Class::Manual::DocMap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst-signup]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/11/catalyst-signup/"/>
    <updated>2012-07-11T22:55:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/11/catalyst-signup</id>
    <content type="html"><![CDATA[<p>Signup Controller <a href="https://gist.github.com/3090526">Login.pm</a></p>

<pre><code>$ vi lib/MyApp/Controller/Login.pm
# 내용 추가
</code></pre>

<h2>:Private</h2>

<p>forword 혹은 detach로만 접근이 가능 하며, URL로 부터 바로 접근이 불가능 합니다.</p>

<pre><code>sub signup :Path('/signup') :Args(0) {
my ( $self, $c ) = @_;

$c-&gt;detach('signup_POST') if $c-&gt;req-&gt;method eq 'POST';
}

sub signup_POST :Private {
my ( $self, $c ) = @_;
</code></pre>

<h2>Validation - Empty Value</h2>

<p>입력값중에 빈값이 있으면 안돼므로 빈값인지 확인 하여 빈값일시 메세지를
출력 할수 있게 작업한다.</p>

<pre><code>my $user_name = $c-&gt;req-&gt;param('user_name') || '';
my $email     = $c-&gt;req-&gt;param('email')     || '';
my $password  = $c-&gt;req-&gt;param('password')  || '';

my @messages;
push @messages, 'Input the user name'     unless $user_name;
push @messages, 'Input the user email'    unless $email;
push @messages, 'Input the user password' unless $password;

if (@messages) {
    $c-&gt;flash(
        messages =&gt; @messages,
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for('/signup'));
}
</code></pre>

<h2>Validation - DB Unique search</h2>

<p>User table에 user_name과 email이 동일한 값이 있는지 확인 하여 동일한
값이 있을시 error_msg를 출력 할수 있게 한다.</p>

<pre><code>my $cond = {};
$cond-&gt;{'me.user_name'} = "$user_name";
my $name_search = $c-&gt;model('DonDB')-&gt;resultset('User')-&gt;search($cond);
if ($name_search-&gt;count) {
    $c-&gt;flash(
        messages =&gt; 'Using ID again input the New ID',
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for('/signup'));
}

$cond = {} if $cond;
$cond-&gt;{'me.email'} = "$email";
my $email_search = $c-&gt;model('DonDB')-&gt;resultset('User')-&gt;search($cond);
if ($email_search-&gt;count) {
    $c-&gt;flash(
        messages      =&gt; 'Using email again input the New email',
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for('/signup'));
}
</code></pre>

<h2>유저 등록</h2>

<p>Validation이 통과 했다면 테이블에 등록 할수 있게 한다.
실패시 signup페이지로 다시 이동 하며</p>

<pre><code>my $time    = strftime "%Y-%m-%d %H:%M:%S", localtime;
my $created = $c-&gt;model('DonDB::User')-&gt;create({
    user_name  =&gt; $user_name,
    email      =&gt; $email,
    password   =&gt; $password,
    created_on =&gt; "$time",
    updated_on =&gt; "$time",
});

$c-&gt;res-&gt;redirect($c-&gt;req-&gt;uri) unless $created;
</code></pre>

<h2>유저 등록 - 확인</h2>

<p>등록후 이름과 패스워드를 확인하여 다음 페이지 혹은 tdpfjaptpwldhk 냐혀ㅔvpdlwlfmf ghcnfgksek.</p>

<pre><code>if ($c-&gt;authenticate({ user_name =&gt; $user_name, password =&gt; $password } )) {
    $c-&gt;res-&gt;redirect($c-&gt;uri_for($c-&gt;controller('List')-&gt;action_for('index')));
} else {
    $c-&gt;stash(error_msg =&gt; "Bad username or password."); # maybe flash?
    $c-&gt;res-&gt;redirect($c-&gt;req-&gt;uri);
}
</code></pre>

<p>}</p>

<p>Signup View.tt <a href="https://gist.github.com/3090541">signup.tt</a></p>

<pre><code>$ vi root/templates/default/src/login/signup.tt
# 내용 추가
</code></pre>

<h2>jquery 미사용</h2>

<p>현재 Validation은 컨트롤 단에서만 검사 한다
추가가 필요함</p>
]]></content>
  </entry>
  
</feed>
