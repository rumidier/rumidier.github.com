<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Meadows of wild horses]]></title>
  <link href="http://rumidier.github.com/atom.xml" rel="self"/>
  <link href="http://rumidier.github.com/"/>
  <updated>2012-11-14T17:52:06+09:00</updated>
  <id>http://rumidier.github.com/</id>
  <author>
    <name><![CDATA[rumidier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Less-Start]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/14/less-start/"/>
    <updated>2012-11-14T17:37:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/14/less-start</id>
    <content type="html"><![CDATA[<h2>LESS - The Dynamic Stylesheet language</h2>

<h2>사용 환경</h2>

<ul>
<li>모델명    :     MacBook Pro</li>
<li>모델 식별자:   MacBookPro8,1</li>
<li>프로세서 이름:   Intel Core i5</li>
<li>프로세서 속도:  2.3 GHz</li>
<li>메모리:           4 GB</li>
<li>기타: homebrew, iTerm</li>
</ul>


<h2>Less 설치</h2>

<h3>Less 공식 사이트</h3>

<p><a href="http://lesscss.org/#usage">Less - Site</a></p>

<h3>npm - Less 설치를 위한 package manager</h3>

<p><a href="http://nodejs.org/download/">npm 다운로드</a></p>

<h3>설치</h3>

<pre><code>$ npm install -g less
</code></pre>

<h2>Less 사용방법</h2>

<ul>
<li><p>Less-Start</p>

<pre><code> $ mkdir Less-Start
 $ cd Less-Start
 $ touch style.less
</code></pre></li>
<li><p>style.less 작성</p></li>
</ul>


<figure class='code'><figcaption><span>style.less  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="k">@color</span><span class="o">:</span> <span class="nf">#4D926F</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">#header</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="o">@</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="o">@</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>.less -> .css 미리보기</p>

<pre><code> $ lessc styles.less

 #header {
   color: #6cc4be;
 }
</code></pre></li>
<li><p>.less -> .css 변환하기</p>

<pre><code> $ lessc styles.less &gt; styles.css
 $ ls

 styles.less styles css
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime text2 vim mode]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/12/sublime-text2-vim-mode/"/>
    <updated>2012-11-12T12:21:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/12/sublime-text2-vim-mode</id>
    <content type="html"><![CDATA[<h3>vim mode 경로</h3>

<p>sublime text2 vim mode 설정하기</p>

<p>http://www.sublimetext.com/docs/2/vintage.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net::Twitter]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/24/net-twitter/"/>
    <updated>2012-09-24T18:06:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/24/net-twitter</id>
    <content type="html"><![CDATA[<p>Net::Twitter 설치시 실패</p>

<p>서버에 모듈을 설치 하려고 하는데 자꾸 실패 하게 되었다.
ssl도 있고 Dev도 있는데 왜??
그건 libssl-dev가 없어서 였다</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[month-split]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/18/month-split/"/>
    <updated>2012-09-18T15:30:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/18/month-split</id>
    <content type="html"><![CDATA[<p>user의 아이디를 가지고 elapsed_at 의 내용을 가져 오게 된다
이 값은 2012-09-09 21:00:00 형식으로 되어 있으며
2012 와 09 를 기준으로 값을 따로 가지게 하여년도별 월 횟수를나타나게
해주었다 하지만 필요 없어 지움&#8230;</p>

<p>controll</p>

<pre><code>$cond = {} if %$cond;

my $user_id;
if ($id) {
    $user_id = $user_info-&gt;id;
}
else {
    $user_id = $c-&gt;user-&gt;id;
}

$cond-&gt;{'me.user_id'} = $user_id;

my %attr            = ( 'order_by' =&gt; { -desc =&gt; 'me.elapsed_at' } );

my $activity_search = $c-&gt;model('BikeMeDB')-&gt;resultset('Activity')-&gt;search($cond, \%attr);
my $activities      = [ $activity_search-&gt;all ];
my $activity_data   = {};

for my $activity (@{ $activities }) {
    my $year;
    my $month;

    my $elapsed = $activity-&gt;elapsed_at;
    $year       = $activity-&gt;elapsed_at-&gt;year;
    $month      = $activity-&gt;elapsed_at-&gt;month;

    my @split_elapsed = split('-', $activity-&gt;elapsed_at, 3);

    $activity_data-&gt;{$split_elapsed[0]}{$split_elapsed[1]}++;
}

my $year  = $c-&gt;req-&gt;params-&gt;{year};
my $month = $c-&gt;req-&gt;params-&gt;{month};

my $max_year  = '00000';
my $max_month = '00';

if ($year &amp;&amp; $month) {
    $max_year  = $year;
    $max_month = $month;
}
else {
    foreach my $year (keys %$activity_data) {
        if ($year gt $max_year) {
            $max_year = $year;
        }
        else {
            $max_month = '00';
            last;
        }

        foreach my $month (keys $activity_data-&gt;{$year}) {
            $max_month = $month if $month gt $max_month;
        }
    }
}

$cond = {} if %$cond;
$cond-&gt;{'me.user_id'} = $user_id;
$cond-&gt;{'me.elapsed_at'} = { 'like', "%"."$max_year"."-"."$max_month"."%" };

$activity_search = $c-&gt;model('BikeMeDB')-&gt;resultset('Activity')-&gt;search($cond, \%attr);
</code></pre>

<p>view - 년-월</p>

<pre><code>[% FOEACH year IN activity_data.keys.reverse %]
    [% FOREACH month IN activity_data.$year.keys.sort.reverse %]
  &lt;div class="btn"&gt;
    &lt;a href="[% c.uri_for('/activities') %]?year=[% year %]&amp;month=[% month %]" class="btn btn-primary"&gt;[% year %]-[% month %] ([% activity_data.$year.$month %])&lt;/a&gt;
&lt;/div&gt;
    [% END %]
[% END %]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst-test-code]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/11/catalyst-test-code/"/>
    <updated>2012-09-11T18:46:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/11/catalyst-test-code</id>
    <content type="html"><![CDATA[<h2>Web - Catalyst Test Code 작성</h2>

<p>Catalyst로 웹을 구축 하던중 테스트 코드를 작성을 부여 받았습니다. 테스트 코드를 진행 하기 위한 모듈을 적습니다.</p>

<h2>모듈</h2>

<p><a href="https://metacpan.org/module/Test::More">Test::More</a></p>

<p>기본 적이 펄 테스트 코드 문법을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/Catalyst::Test#res-request-...-">Catalyst::Test</a></p>

<p>content, response 페이지 정보를 얻어 올수 있습니다.</p>

<p><a href="ihttps://metacpan.org/module/HTTP::Response">HTTP::Response</a></p>

<p>response 정보등을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/URI">URI</a></p>

<p>response 정보등을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/HTTP::Request::Common">HTTP::Request::Common</a></p>

<p>Get POST 등을 구현 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/CGI::Simple::Cookie">CGI::Simple::Cookie</a></p>

<p>로그인 인증 관련 세션 처리를 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/HTTP::Cookies">HTTP::Cookies</a></p>

<p>CGI::Simple::Cookie로 쿠키 관련 재설정이 반복 되며 번거로울때
파일로 저장하여 사용할수 있다.</p>

<pre><code>## 첫번째 t 파일에서 login 하고 cookie 를 저장해둔다. pull/109설명중.
my $cookies = HTTP::Cookies-&gt;new(file =&gt; 't/.cookies');
# res &amp; res
$cookies-&gt;extract_cookies($res);
$cookies-&gt;save;

## 다른 t 파일에서는..
my $cookies = (split(/:/, HTTP::Cookies-&gt;new(file =&gt; 't/.cookies')-&gt;as_string))[1];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[export_csv]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/25/export-csv/"/>
    <updated>2012-07-25T19:01:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/25/export-csv</id>
    <content type="html"><![CDATA[<p>목차</p>

<ol>
<li>CSV 출력 준비</li>
<li>View 생성</li>
</ol>


<h3>CSV 출력 준비</h3>

<p>선택된 내역을 출력 하기 위한 버튼을 추가한다.</p>

<p>root/templates/bootstrap/src/deposit/index.tt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;a class="btn btn-primary" id="do_export"&gt;출력&lt;/a&gt;</span></code></pre></td></tr></table></div></figure>


<p>선택된 내역 js처리</p>

<p>root/static/scripts/list.js</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $('#do_export').click(function() {
</span><span class='line'>    var selected_charges = [];
</span><span class='line'>
</span><span class='line'>    $('#charge_list tr').filter(':has(:checkbox:checked)').each(function(){
</span><span class='line'>      if($(this).attr('id') !== undefined)
</span><span class='line'>        selected_charges.push($(this).attr('id'))
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    location.href = '/deposit/export/' + selected_charges;
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<p>Sil/Web/Don/Controller/Deposit.pm</p>

<p>선택된 승인 내역을 CSV로 출력하기 위하여
모듈 - <a href="https://metacpan.org/module/Catalyst::View::Download::CSV">Catalyst::View::Download::CSV</a>을 사용 하였습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sub export :Local CaptureArgs(1) {
</span><span class='line'>    my ( $self, $c, $id ) = @_;
</span><span class='line'>    my @target_ids = split ',', $id;
</span><span class='line'>    
</span><span class='line'>    my @charges;
</span><span class='line'>    
</span><span class='line'>    push @charges, ['제목', '청구자', '금액', '영수증날짜'];
</span><span class='line'>    
</span><span class='line'>    foreach my $charge($c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search({id =&gt; { -in =&gt; \@target_ids }})-&gt;all) {
</span><span class='line'>        push @charges, [ $charge-&gt;title, $charge-&gt;user-&gt;user_name, $charge-&gt;amount, $charge-&gt;usage_date];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (@charges) {
</span><span class='line'>        $c-&gt;stash-&gt;{'csv'} = { 'data' =&gt; [ @charges ] };
</span><span class='line'>        $c-&gt;flash-&gt;{messages} = 'Success Exported.';
</span><span class='line'>
</span><span class='line'>    } else {
</span><span class='line'>        $c-&gt;flash-&gt;{messages} = 'Export Failed.';
</span><span class='line'>    }
</span><span class='line'>    $c-&gt;forward('Sil::Web::Don::View::Download::CSV');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>View 생성</h2>

<p>View는 script_web_don_create view로 생성한다.</p>

<p>list/Sil/Web/Don/View/Download/CSV.pm을 생성 완료.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package Sil::Web::Don::View::Download::CSV;
</span><span class='line'>use Moose;
</span><span class='line'>use namespace::autoclean;
</span><span class='line'>
</span><span class='line'>extends 'Catalyst::View::Download::CSV';
</span><span class='line'>
</span><span class='line'>=head1 NAME
</span><span class='line'>
</span><span class='line'>Sil::Web::Don::View::Download::CSV - Catalyst View
</span><span class='line'>
</span><span class='line'>=head1 DESCRIPTION
</span><span class='line'>
</span><span class='line'>Catalyst View.
</span><span class='line'>
</span><span class='line'>=head1 AUTHOR
</span><span class='line'>
</span><span class='line'>ja3ck
</span><span class='line'>
</span><span class='line'>=head1 LICENSE
</span><span class='line'>
</span><span class='line'>This library is free software. You can redistribute it and/or modify
</span><span class='line'>it under the same terms as Perl itself.
</span><span class='line'>
</span><span class='line'>=cut
</span><span class='line'>
</span><span class='line'>__PACKAGE__-&gt;meta-&gt;make_immutable;
</span><span class='line'>
</span><span class='line'>1;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DB_Password_Hash]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/25/db-password-hash/"/>
    <updated>2012-07-25T16:41:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/25/db-password-hash</id>
    <content type="html"><![CDATA[<h2>DB Password HASH</h2>

<p><a href="https://metacpan.org/module/DBIx::Class::EncodedColumn">DBIx::Class::EncodedColumn</a></p>

<p>기본 입력값 입력시 sha(&#8216;password&#8217;)사용 하여 암호화 할수 있도록 한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO `user` VALUES (2,'rum_user','rum_user@mail.com',sha('Password'),localtime ,localtime);</span></code></pre></td></tr></table></div></figure>


<p>MyWeb::ResultBase.pm에 EncodedColumn 추가하여 준다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__PACKAGE__-&gt;load_components(qw/
</span><span class='line'>    EncodedColumn
</span><span class='line'>    InflateColumn::DateTime
</span><span class='line'>    TimeStamp
</span><span class='line'>/);</span></code></pre></td></tr></table></div></figure>


<p><a href="https://metacpan.org/module/Catalyst::Plugin::Authentication">Catalyst::Plugin::Authentication</a></p>

<p>my_web.conf 파일에 플러그인 설정 추가
pawword_type 설정시 디폴트로 SHA-1이 적용되지만
명시적으로 password_hash_type을 정의 하여 준다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Plugin::Authentication&gt;
</span><span class='line'>    &lt;default&gt;
</span><span class='line'>        password_type      hashed
</span><span class='line'>        password_hash_type SHA-1
</span><span class='line'>        user_model         DonDB::User
</span><span class='line'>        class              SimpleDB
</span><span class='line'>    &lt;/default&gt;
</span><span class='line'>&lt;/Plugin::Authentication&gt;</span></code></pre></td></tr></table></div></figure>


<h3>설정 추가 참고 자료</h3>

<p><a href="https://metacpan.org/module/Catalyst::Authentication::Credential::Password">Catalyst::Authentication::Credential::Password</a></p>

<p><a href="https://metacpan.org/module/Digest#new">Digest</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Templet_br]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/24/templet-br/"/>
    <updated>2012-07-24T14:28:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/24/templet-br</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don-Change-space]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/24/don-change-space/"/>
    <updated>2012-07-24T14:20:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/24/don-change-space</id>
    <content type="html"><![CDATA[<h2>Sil::Web::Don 변경</h2>

<p>Sil::Schema는 Sil의 공용 스키마가 아닌데도 불구 하고 그렇게 보일수도 있는
상태 이다 이를 바꾸기 위해서
Sil::Don::Schema로 바꾼다. 이는 Sil의 Don만의 스키마라고
명시 해주는것과 같다.</p>

<p>변경전</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lib
</span><span class='line'>`-- Sil
</span><span class='line'>    |-- Schema
</span><span class='line'>    |   |-- Result
</span><span class='line'>    |   |   |-- Charge.pm
</span><span class='line'>    |   |   `-- User.pm
</span><span class='line'>    |   `-- ResultBase.pm
</span><span class='line'>    |-- Schema.pm
</span><span class='line'>    `-- Web
</span><span class='line'>        |-- Don
</span><span class='line'>        |   |-- Controller
</span><span class='line'>        |   |   |-- Deposit.pm
</span><span class='line'>        |   |   |-- List.pm
</span><span class='line'>        |   |   |-- Login.pm
</span><span class='line'>        |   |   |-- Logout.pm
</span><span class='line'>        |   |   `-- Root.pm
</span><span class='line'>        |   |-- Model
</span><span class='line'>        |   |   `-- DonDB.pm
</span><span class='line'>        |   `-- View
</span><span class='line'>        |       |-- Bootstrap.pm
</span><span class='line'>        |       `-- Download
</span><span class='line'>        |           `-- CSV.pm
</span><span class='line'>        `-- Don.pm</span></code></pre></td></tr></table></div></figure>


<p> 변경후</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> lib
</span><span class='line'>└── Sil
</span><span class='line'>    └── Don
</span><span class='line'>        ├── Schema
</span><span class='line'>        │   ├── Result
</span><span class='line'>        │   │   ├── Charge.pm
</span><span class='line'>        │   │   └── User.pm
</span><span class='line'>        │   └── ResultBase.pm
</span><span class='line'>        ├── Schema.pm
</span><span class='line'>        ├── Web
</span><span class='line'>        │   ├── Controller
</span><span class='line'>        │   │   ├── Deposit.pm
</span><span class='line'>        │   │   ├── List.pm
</span><span class='line'>        │   │   ├── Login.pm
</span><span class='line'>        │   │   ├── Logout.pm
</span><span class='line'>        │   │   └── Root.pm
</span><span class='line'>        │   ├── Model
</span><span class='line'>        │   │   └── DonDB.pm
</span><span class='line'>        │   └── View
</span><span class='line'>        │       ├── Bootstrap.pm
</span><span class='line'>        │       └── Download
</span><span class='line'>        │           └── CSV.pm
</span><span class='line'>        └── Web.pm</span></code></pre></td></tr></table></div></figure>


<h2>경로명 변경</h2>

<p>의존성이 걸려있는 모든 내역들을 grep 명령어로 찾아 아래와 같이 수정해 주었다.</p>

<p>변경전</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Sil::Schema::Result::Charge
</span><span class='line'>Sil::Schema::Result::User
</span><span class='line'>Sil::Schema::ResultBase
</span><span class='line'>Sil::Schema
</span><span class='line'>
</span><span class='line'>Sil::Web::Don::Controller::Deposit
</span><span class='line'>Sil::Web::Don::Controller::List
</span><span class='line'>Sil::Web::Don::Controller::Login
</span><span class='line'>Sil::Web::Don::Controller::Logout
</span><span class='line'>Sil::Web::Don::Controller::Root
</span><span class='line'>Sil::Web::Don::Model::DonDB
</span><span class='line'>Sil::Web::Don::View::Bootstrap
</span><span class='line'>Sil::Web::Don::View::Download::CS
</span><span class='line'>Sil::Web::Don</span></code></pre></td></tr></table></div></figure>


<p>변경후</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Sil::Don::Schema::Result::Charge
</span><span class='line'>Sil::Don::Schema::Result::User
</span><span class='line'>Sil::Don::Schema::ResultBase
</span><span class='line'>Sil::Don::Schema
</span><span class='line'>
</span><span class='line'>Sil::Don::Web::Controller::Deposit
</span><span class='line'>Sil::Don::Web::Controller::List
</span><span class='line'>Sil::Don::Web::Controller::Login
</span><span class='line'>Sil::Don::Web::Controller::Logout
</span><span class='line'>Sil::Don::Web::Controller::Root
</span><span class='line'>Sil::Don::Web::Model::DonDB
</span><span class='line'>Sil::Don::Web::View::Bootstrap
</span><span class='line'>Sil::Don::Web::View::Download::CS
</span><span class='line'>Sil::Don::Web</span></code></pre></td></tr></table></div></figure>


<h2>변경후 문제점</h2>

<p>내용 수정후 서버 실행이 app.psgi에서 모듈을 찾지 못한다고 하였다.
이유는 Sil_web_Don.conf 파일명을 수정 해주지 않았기에 발생한 문제였다.
경로명이 바뀌엇듯이 파일명도 교체 해주어야 한다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don release]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/23/don-release/"/>
    <updated>2012-07-23T18:49:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/23/don-release</id>
    <content type="html"><![CDATA[<h2>Donnenwa Open</h2>

<ol>
<li>DNS 요구</li>
<li>Apache2 설정</li>
<li>supervisior 설정</li>
<li>확인</li>
</ol>


<h3>DNS 요구</h3>

<p>도메인 네임을 받아 현진이(서버)에 연결해 주어야 하지만
브롬튼에 도메인이 정의가 되있기 때문에 SE님에게 요구하면 된다.(나만되는겨)</p>

<h3>Apache2 설정</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh rumidier@bu….접속
</span><span class='line'>$ cd /etc/apache2/
</span><span class='line'>$ cd sites-available
</span><span class='line'>$ vi user.site.kr (작성)
</span><span class='line'>$ cd ../
</span><span class='line'>$ cd sites-enable
</span><span class='line'>$ ln -s 타킷-경로
</span><span class='line'>$ ~/etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>supervisior 설정</h3>

<p>슈퍼 바이저는 서버가 죽었다 다시 살아 났을시 수동이 아닌 자동으로 서버를 뛰워주기 위해 필요한 기능이다.</p>

<p>돈내놔는 carton을 사용하고 plackup으로 뛰우며 플라넥스와는 다르게 worker의 갯수가 존재 하지 않는다. 포트 설정은 아파치에서 해준 포트를 명시 해준후 디렉토리와 유저, 환경 등록을 해주면 끝이 난다.
환경경로는 carton과 plackup 경로도 알아야 하는거 같다(이 부분은 설명이 더 필요)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /etc
</span><span class='line'>$ vi supervisord.conf
</span><span class='line'>
</span><span class='line'>[program:Donnenwa] 
</span><span class='line'>command=/usr/local/bin/carton exec -Ilib -- /home/USER Donnenwa/local/bin/plackup -Ilib -a /home/USER/Donnenwa
</span><span class='line'>app.psgi --host 127.0.0.1 --port You_port(ex:3000)  
</span><span class='line'>directory=/home/User/Donnenwa 
</span><span class='line'>user=USER 
</span><span class='line'>environment=PATH=/usr/local/bin:/usr/bin:/bin,HOME=/home/USER
</span><span class='line'>stdout_logfile=/home/USER/logs/stdout 
</span><span class='line'>stderr_logfile=/home/USER/logs/stderr 
</span><span class='line'>
</span><span class='line'>$ sudo supervisorctl
</span><span class='line'>supervisor&gt; status
</span><span class='line'>….
</span><span class='line'>supervisor&gt; update
</span><span class='line'>supervisor&gt; exit
</span><span class='line'>$ 서버 실행 확인 끝</span></code></pre></td></tr></table></div></figure>


<h3>더 물어 봐야 할것</h3>

<ol>
<li>supervisor의 셋팅을 무엇을 참조 하는가?</li>
<li>도메인 등록은 어떻게 하는가?</li>
<li>apach2 설정은 어떻게 하는가?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side-function]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/side-function/"/>
    <updated>2012-07-12T14:03:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/side-function</id>
    <content type="html"><![CDATA[<h2>Action - approval, refuse</h2>

<p><a href="https://gist.github.com/3096325">approval</a></p>

<p><a href="https://gist.github.com/3096321">refuse</a></p>

<p>Approval은 청구 목록에 대하여 승인 기능을
refuse는 청구 목렉에 대하여 거부 기능을 가지게 된다.</p>

<p>승인 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기 리스트 상태, 거부 리스트 상태
에서 활성화가 되고 action을 취할수 있게 한다.</p>

<p>거부 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기 리스트 상태, 승인 리스트 상태
에서 활성화가 되고 action 을 취할수 있게 한다.</p>

<p>/list/view/user_id</p>

<p>아래와 같이 id 값과 함께 전달 할수 있다.</p>

<pre><code>&lt;a href="[% c.uri_for('/list/approval', charge.id) %]" class="btn btn-primary"&gt;승인&lt;/a&gt;
&lt;a href="[% c.uri_for('/list/refuse', charge.id) %]" class="btn btn-primary"&gt;거부&lt;/a&gt;
</code></pre>

<p>CaputreArgs(1) 옵션으로 $id 값(들)을 받을수 있게 된다.</p>

<pre><code>sub approval :Local :CaptureArgs(1) {
    my ( $self, $c, $id ) = @_;
    my @target_ids = split ',', $id;

sub refuse :Local :CaptureArgs(1) {
my ( $self, $c, $id ) = @_;
my @target_ids = split ',', $id;
</code></pre>

<p>@target_id의 모든 값(들)을 status값이 2 or 3로 업데이트 한다.
업데이트는 검색을 한 값들을 대상으로 update를 하게 된다.</p>

<pre><code>$ vi root/templates/default/src/list

# 승인
my $approval = $c-&gt;model('MyApp_DB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in
        =&gt; \@target_ids } })-&gt;update_all({ status =&gt; '2' });
# 거부
my $refuse = $c-&gt;model('MyApp_DB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in
        =&gt; \@target_ids } })-&gt;update_all({ status =&gt; '3' });
</code></pre>

<p>flash기능으로 messages값을 전달하여 조건에 맞을시 메세지를 출력 시키도록 한다.(/list/index.tt 참고)
조건은 approval, refuse기능이 정상 작동 되었는지를 검사 하게 된다.</p>

<pre><code>if ($query_status) {
    $c-&gt;flash-&gt;{messages} = 'Success message.';
}
else {
    $c-&gt;flash-&gt;{messages} = 'No status Item.';
}
</code></pre>

<p>템플릿에 쓰일 status값과 함께 전체 목록으로 redirect 시키도록 한다.</p>

<pre><code>$c-&gt;stash-&gt;{status} = '2'; #상태에 맞는 status값
$c-&gt;res-&gt;redirect($c-&gt;uri_for('/list'));
</code></pre>

<h2>Action - delete</h2>

<p><a href="https://gist.github.com/3096329">delete</a></p>

<p>승인 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기, 거부, 수정 상태
 에서 활성화가 되고 action을 취할수 있게 한다.</p>

<pre><code>$ vi root/templates/default/src/list
&lt;a href="[% c.uri_for('/list/delete', charge.id) %]" class="btn btn-primary"&gt;삭제&lt;/a&gt;
</code></pre>

<p>다른 기능과 같이 CaptureArgs(1)를 받는다.</p>

<pre><code>sub delete :Local :CaptureArgs(1) {
my ( $self, $c, $id ) = @_;
my @target_ids = split ',', $id;
</code></pre>

<p>다른 기능과 달리 update_all 이 아닌 delete_all를 통하여 내용을 삭제 한다.</p>

<pre><code>my $charge = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in =&gt; \@target_ids } })-&gt;delete_all;
</code></pre>

<h2>CPAN</h2>

<p><a href="https://metacpan.org/module/DBIx::Class::Manual::DocMap">DBIx::Class::Manual::DocMap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list-edit]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/list-edit/"/>
    <updated>2012-07-12T13:56:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/list-edit</id>
    <content type="html"><![CDATA[<h2>청구 내역 수정</h2>

<p><a href="https://gist.github.com/3095912">List-edit-action</a></p>

<p>수정 되어야할 $edit_id를 받을수 있어햐 한다.</p>

<pre><code>sub edit :Local :CaptureArgs(1) {
my ( $self, $c, $edit_id ) = @_;
</code></pre>

<p>수정할 폼을 제출 했을때 업데이트 동작 혹은 정보 출력을 하여야 한다.</p>

<pre><code>if ($c-&gt;req-&gt;method eq 'POST') {
    my @messages;

    push @messages, 'amount is invaild' if ($c-&gt;req-&gt;params-&gt;{amount} !~ /^\d+$/);
    push @messages, 'title is required' unless ($c-&gt;req-&gt;params-&gt;{title});

    if (@messages) {
    $c-&gt;flash(
        messages =&gt; @messages,
        comment  =&gt; $c-&gt;req-&gt;params-&gt;{comment},
        title    =&gt; $c-&gt;req-&gt;params-&gt;{title},
        amount   =&gt; $c-&gt;req-&gt;params-&gt;{amount},
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for("/list/view/$c-&gt;req-&gt;params-&gt;{charge_id}"));
    }

    my $time = strftime "%Y-%m-%d %H:%M:%S", localtime;
    my %row = (
    id         =&gt; $c-&gt;req-&gt;params-&gt;{charge_id},
    amount     =&gt; $c-&gt;req-&gt;params-&gt;{amount},
    user       =&gt; $c-&gt;req-&gt;params-&gt;{charge_user},
    title      =&gt; $c-&gt;req-&gt;params-&gt;{title},
    comment    =&gt; $c-&gt;req-&gt;params-&gt;{comment},
    updated_on =&gt; "$time",
    );
    $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;update_or_create(\%row);

    $c-&gt;res-&gt;redirect($c-&gt;uri_for("/list/view/$row{id}"));
}
else {
    my $editer = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;find($edit_id);

    $c-&gt;stash(
    editer =&gt; $editer,
    );
}
}
</code></pre>

<p><a href="https://gist.github.com/3095922">List-edit.tt</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list-write]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/list-write/"/>
    <updated>2012-07-12T13:49:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/list-write</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3095879">List-write.tt</a>
<a href="https://gist.github.com/3095901">List-write-action</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list-view]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/list-view/"/>
    <updated>2012-07-12T13:41:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/list-view</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3095846">List-view-action</a>
<a href="https://gist.github.com/3095858">List-view.tt</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[list]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/11/list/"/>
    <updated>2012-07-11T23:06:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/11/list</id>
    <content type="html"><![CDATA[<h2>청구 목록 페이지</h2>

<p><a href="https://gist.github.com/3095682">List.pm - index</a></p>

<p><a href="https://gist.github.com/3095679">/list/index.tt</a></p>

<h2>List Controller - Query option</h2>

<p>등록 날짜 역순 출력을 위한 내림 차수 옵션을 준다.</p>

<pre><code>my %attr  = ( 'order_by' =&gt; { -desc =&gt; 'me.id' } );

my $total_charge;
my %cond    = ();
</code></pre>

<p>현재 가르켜야 할 페이지 정보가 없다면 1페이지로 하게 한다.</p>

<pre><code>my $page    = $c-&gt;req-&gt;params-&gt;{page};
$attr{page} = $page || 1;
</code></pre>

<p>status 옵션이 정의 되지 않았다면 전체(대기/승인/거부) 검색을 할수 있게 한다.</p>

<pre><code>my $status  = $c-&gt;req-&gt;param("status") || $c-&gt;stash-&gt;{"status"} || '0'; #수정 필요
</code></pre>

<p>status 옵션 없으면 전체 있으면 상태 검색 할수 있게 한다.</p>

<pre><code>%cond         = ( status =&gt; $status ) if $status;
$total_charge = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search(\%cond, \%attr);
</code></pre>

<p>Data::Pageset활용 하여 페이징 할수 있다.</p>

<pre><code>my $page_info =
Data::Pageset-&gt;new(
    {
    ( map { $_ =&gt; $total_charge-&gt;pager-&gt;$_ } qw/entries_per_page total_entries current_page/ ),
    mode =&gt; "slide",
    pages_per_set =&gt; 10,
    }
);

$c-&gt;stash(
    lists   =&gt; [ $total_charge-&gt;all ],
    status  =&gt; $status,
    pageset =&gt; $page_info,
);
}
</code></pre>

<h2>List - View</h2>

<p>성공 혹은 실패 메세지 출력을 할수 있게 한다.</p>

<pre><code>[% IF messages %]
&lt;div class="alert fade in"&gt;
&lt;button class="close" data-dismiss="alert"&gt;&amp;times;&lt;/button&gt;
[% messages %]
&lt;/div&gt;
[% END %]
</code></pre>

<p>탭 등록으로 원하는 상태의 값들만 보여 줄수 있게 한다.</p>

<pre><code>&lt;div class="container-fluid"&gt;
  &lt;div class="row-fluid"&gt;
&lt;div class="span2"&gt;
  &lt;ul class="nav nav-tabs nav-stacked"&gt;
    &lt;li class="active"&gt;&lt;a href="http://rumidier.github.com/list"&gt;전체&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://rumidier.github.com/list?status=1"&gt;대기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://rumidier.github.com/list?status=2"&gt;승인&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://rumidier.github.com/list?status=3"&gt;거부&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>현재 경로가 어떻게 되는지 확인 할수 있도록 한다.</p>

<pre><code>&lt;div class="span10"&gt;
  &lt;ul class="breadcrumb"&gt;
    &lt;li&gt;목록
        &lt;span class="divider"&gt;/&lt;/span&gt;
    &lt;/li&gt;      
    &lt;li class="active"&gt;
    [% IF status == "1" %]
        &lt;b&gt; 대기 &lt;/b&gt;
    [% ELSIF status == "2" %]
        &lt;b&gt; 승인 &lt;/b&gt;
    [% ELSIF status == "3" %]
        &lt;b&gt; 거부 &lt;/b&gt;
    [% ELSE %]
        &lt;b&gt; 전체 &lt;/b&gt;
    [% END %]     
    &lt;/li&gt;
  &lt;/ul&gt;
</code></pre>

<h2>CPAN</h2>

<p><a href="https://metacpan.org/module/Data::Pageset">Data::Pageset</a></p>

<p><a href="https://metacpan.org/module/DBIx::Class::Manual::DocMap">DBIx::Class::Manual::DocMap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst-signup]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/11/catalyst-signup/"/>
    <updated>2012-07-11T22:55:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/11/catalyst-signup</id>
    <content type="html"><![CDATA[<p>Signup Controller <a href="https://gist.github.com/3090526">Login.pm</a></p>

<pre><code>$ vi lib/MyApp/Controller/Login.pm
# 내용 추가
</code></pre>

<h2>:Private</h2>

<p>forword 혹은 detach로만 접근이 가능 하며, URL로 부터 바로 접근이 불가능 합니다.</p>

<pre><code>sub signup :Path('/signup') :Args(0) {
my ( $self, $c ) = @_;

$c-&gt;detach('signup_POST') if $c-&gt;req-&gt;method eq 'POST';
}

sub signup_POST :Private {
my ( $self, $c ) = @_;
</code></pre>

<h2>Validation - Empty Value</h2>

<p>입력값중에 빈값이 있으면 안돼므로 빈값인지 확인 하여 빈값일시 메세지를
출력 할수 있게 작업한다.</p>

<pre><code>my $user_name = $c-&gt;req-&gt;param('user_name') || '';
my $email     = $c-&gt;req-&gt;param('email')     || '';
my $password  = $c-&gt;req-&gt;param('password')  || '';

my @messages;
push @messages, 'Input the user name'     unless $user_name;
push @messages, 'Input the user email'    unless $email;
push @messages, 'Input the user password' unless $password;

if (@messages) {
    $c-&gt;flash(
        messages =&gt; @messages,
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for('/signup'));
}
</code></pre>

<h2>Validation - DB Unique search</h2>

<p>User table에 user_name과 email이 동일한 값이 있는지 확인 하여 동일한
값이 있을시 error_msg를 출력 할수 있게 한다.</p>

<pre><code>my $cond = {};
$cond-&gt;{'me.user_name'} = "$user_name";
my $name_search = $c-&gt;model('DonDB')-&gt;resultset('User')-&gt;search($cond);
if ($name_search-&gt;count) {
    $c-&gt;flash(
        messages =&gt; 'Using ID again input the New ID',
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for('/signup'));
}

$cond = {} if $cond;
$cond-&gt;{'me.email'} = "$email";
my $email_search = $c-&gt;model('DonDB')-&gt;resultset('User')-&gt;search($cond);
if ($email_search-&gt;count) {
    $c-&gt;flash(
        messages      =&gt; 'Using email again input the New email',
    );

    return $c-&gt;res-&gt;redirect($c-&gt;uri_for('/signup'));
}
</code></pre>

<h2>유저 등록</h2>

<p>Validation이 통과 했다면 테이블에 등록 할수 있게 한다.
실패시 signup페이지로 다시 이동 하며</p>

<pre><code>my $time    = strftime "%Y-%m-%d %H:%M:%S", localtime;
my $created = $c-&gt;model('DonDB::User')-&gt;create({
    user_name  =&gt; $user_name,
    email      =&gt; $email,
    password   =&gt; $password,
    created_on =&gt; "$time",
    updated_on =&gt; "$time",
});

$c-&gt;res-&gt;redirect($c-&gt;req-&gt;uri) unless $created;
</code></pre>

<h2>유저 등록 - 확인</h2>

<p>등록후 이름과 패스워드를 확인하여 다음 페이지 혹은 tdpfjaptpwldhk 냐혀ㅔvpdlwlfmf ghcnfgksek.</p>

<pre><code>if ($c-&gt;authenticate({ user_name =&gt; $user_name, password =&gt; $password } )) {
    $c-&gt;res-&gt;redirect($c-&gt;uri_for($c-&gt;controller('List')-&gt;action_for('index')));
} else {
    $c-&gt;stash(error_msg =&gt; "Bad username or password."); # maybe flash?
    $c-&gt;res-&gt;redirect($c-&gt;req-&gt;uri);
}
</code></pre>

<p>}</p>

<p>Signup View.tt <a href="https://gist.github.com/3090541">signup.tt</a></p>

<pre><code>$ vi root/templates/default/src/login/signup.tt
# 내용 추가
</code></pre>

<h2>jquery 미사용</h2>

<p>현재 Validation은 컨트롤 단에서만 검사 한다
추가가 필요함</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst-Login]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/11/catalyst-login/"/>
    <updated>2012-07-11T20:44:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/11/catalyst-login</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/module/Catalyst::Manual::Tutorial::05_Authentication">Catalyst::Manual::Tutorial::05_Authentication</a></p>

<h2>Load plugins</h2>

<p>/lib/MyApp.pm</p>

<pre><code>$ vi ./lib/MyApp/Web/MyApp.pm

# 아래에 다음과 같이 추가
use Catalyst qw/
-Debug
ConfigLoader
Static::Simple
Unicode::Encoding

StackTrace

Authentication

Session
Session::Store::File
Session::State::Cookie
/;
</code></pre>

<p>MakeFile.PL</p>

<pre><code>$ vi Makefile.PL

# 추가
requires 'Catalyst::Plugin::Authentication';
requires 'Catalyst::Plugin::Session';
requires 'Catalyst::Plugin::Session::Store::File';
requires 'Catalyst::Plugin::Session::State::Cookie';

$ carton install
</code></pre>

<p>MyApp.conf</p>

<pre><code>$vi MyApp.conf

# 추가
&lt;Plugin::Authentication&gt;
&lt;default&gt;
    password_type clear
    user_model    DB::User
    class         SimpleDB
&lt;/default&gt;
&lt;/Plugin::Authentication&gt;
</code></pre>

<h2>Add Login and Logout Controllers</h2>

<p>Controller 생성</p>

<pre><code>$ script/myapp_create.pl controller Login
$ script/myapp_create.pl controller Logout
</code></pre>

<p>Login <a href="https://gist.github.com/3089985">Login.pm</a></p>

<pre><code>$ vi lib/MyApp/Controller/Login.pm
</code></pre>

<p>Logout <a href="https://gist.github.com/3090013">Logout.pm</a></p>

<pre><code>$ vi lib/MyApp/Controller/Logout.pm
</code></pre>

<h2>Add Valid User Check</h2>

<p>Root <a href="https://gist.github.com/3090343">Root.pm</a></p>

<pre><code>$ vi lib/MyApp/Controller/Root.pm
</code></pre>

<h2>추가 해야 할점</h2>

<p>현재는 DB에 유저의 password가 암호화 되지 않음 문서상
다음 내용에 나오기 때문에 추가가 필요함</p>

<h2>CPAN</h2>

<p><a href="https://metacpan.org/module/DBIx::Class::Manual::DocMap">DBIx::Class::Manual::DocMap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[catalyst]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/04/catalyst/"/>
    <updated>2012-07-04T19:02:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/04/catalyst</id>
    <content type="html"><![CDATA[<h2>DBIx::Class로 스키마 관리하기</h2>

<p><a href="http://advent.perl.kr/2011/2011-12-17.html">jeen</a>님이 발표한 스키마 관리 하기
입니다.</p>

<p>jeen님의 글을 보게 되면 기존의 스키마를 관리하는 방법은 sql의 잦은 교체시 많은 문제점이
발생하고 있다고 서술 합니다.</p>

<p>스키마 관리를 좀더 편하게 하기 위하여 마지막에 서술 하는
<a href="https://metacpan.org/module/dbicdump">dbicdump</a>를 사용하여 간편하게 스키마 관리를 해보도록
합니다.</p>

<p>dbicdump를 사용하기 위해 필요한 ResultBase.pm과 schema.pl파일을 만들어 보도록 하겠습니다.</p>

<h2>schema/schema.pl</h2>

<p><a href="http://rumidier.github.com/blog/2012/07/02/catalyst/">schema.pl 설명</a></p>

<figure class='code'><figcaption><span>schema.pl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$DB_NAME</span>     <span class="o">=</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">DB</span><span class="p">}</span>           <span class="o">||</span> <span class="s">&#39;DB_NAME&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$DB_USER</span>     <span class="o">=</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">DB_USER</span><span class="p">}</span>     <span class="o">||</span> <span class="s">&#39;DB_USER&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$DB_PASSWORD</span> <span class="o">=</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">DB_PASSWORD</span><span class="p">}</span> <span class="o">||</span> <span class="s">&#39;DB_PASSWORD&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">schema_class</span> <span class="o">=&gt;</span> <span class="s">&quot;Silex::Schema&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">connect_info</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">dsn</span>               <span class="o">=&gt;</span> <span class="s">&quot;dbi:mysql:$DB_NAME:127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">user</span>              <span class="o">=&gt;</span> <span class="nv">$DB_USER</span><span class="p">,</span>
</span><span class='line'>  <span class="n">pass</span>              <span class="o">=&gt;</span> <span class="nv">$DB_PASSWORD</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mysql_enable_utf8</span>  <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="n">loader_options</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">dump_directory</span>     <span class="o">=&gt;</span> <span class="s">&#39;lib&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">naming</span>             <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">ALL</span> <span class="o">=&gt;</span> <span class="s">&#39;v8&#39;</span> <span class="p">},</span>
</span><span class='line'>  <span class="n">skip_load_external</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">relationships</span>      <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">use_moose</span>          <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">only_autoclean</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">col_collision_map</span>  <span class="o">=&gt;</span> <span class="s">&#39;column_%s&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">result_base_class</span> <span class="o">=&gt;</span> <span class="s">&#39;MyApp::Schema::ResultBase&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">overwrite_modifications</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">datetime_undef_if_invalid</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">custom_column_info</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>  <span class="k">my</span> <span class="p">(</span><span class="nv">$table</span><span class="p">,</span> <span class="nv">$col_name</span><span class="p">,</span> <span class="nv">$col_info</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$col_name</span> <span class="ow">eq</span> <span class="s">&#39;password&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="nv">%</span><span class="p">{</span> <span class="nv">$col_info</span> <span class="p">},</span>
</span><span class='line'>          <span class="n">encode_column</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="n">encode_class</span>  <span class="o">=&gt;</span> <span class="s">&#39;Digest&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">encode_args</span>   <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">algorithm</span> <span class="o">=&gt;</span> <span class="s">&#39;SHA-1&#39;</span><span class="p">,</span> <span class="nb">format</span> <span class="o">=&gt;</span> <span class="s">&#39;hex&#39;</span> <span class="p">},</span>
</span><span class='line'>          <span class="n">encode_check_method</span> <span class="o">=&gt;</span> <span class="s">&#39;check_password&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span> <span class="c1"># DB password 설정</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$col_name</span> <span class="ow">eq</span> <span class="s">&#39;created_on&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="nv">%</span><span class="p">{</span> <span class="nv">$col_info</span> <span class="p">},</span> <span class="n">set_on_create</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inflate_datetime</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span> <span class="c1"># DB created_on 설정</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$col_name</span> <span class="ow">eq</span> <span class="s">&#39;updated_on&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="nv">%</span><span class="p">{</span> <span class="nv">$col_info</span> <span class="p">},</span> <span class="n">set_on_create</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">set_on_update</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inflate_datetime</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span> <span class="c1"># DB updated_on 설정</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>lib/MyApp/Schema/ResultBase.pm</h2>

<p>ResultBase 클래스의 제약 문제 때문에 result_base_class 값을 지정해 줌으로써 모든 결과
 클래스들은 DBIx::Class::Core가 아닌 MyApp::Schema::ResultBase를 상속받게 합니다.
MyApp::Schema::ResultBase는 개인이 정의 해주는것 이므로 아래를 참조 합니다.</p>

<p>MD5 체크섬 값 아래에 중복되는 코드를 매번 적어주어야 했습니다.
이렇게 사용할 컴포넌트들을 결과클래스 별로 지정하는 대신 ResultBase 클래스를 읽어들입니다.
사실 이처럼 ResultBase를 놓고 여기에 컴포넌트를 일괄해서 읽어들이는 방식은
Cookbook 문서에서도 스타트업 속도 향상을 위해 권장하고 있습니다. - <a href="http://advent.perl.kr/2011/2011-12-17.html">by Jeen</a> -</p>

<p>그리고 컴포넌트의 사용을 위한 컬럼의 속성은 custom_column_info 속성에 코드를 등록해 지정할 수 있습니다.(schema.pl 하단 참조)
 위의 코드처럼 등록하면 created_on 속성에 TimeStamp 컴포넌트를 사용하기 위한 속성 값인 set_on_create 옵션이 모든 결과클래스에 추가됩니다.
(이거 멋지다..)</p>

<figure class='code'><figcaption><span>ResultBase </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package MyApp::Schema::ResultBase;
</span><span class='line'>use Moose;
</span><span class='line'>use MooseX::NonMoose;
</span><span class='line'>use namespace::autoclean;
</span><span class='line'>
</span><span class='line'>extends 'DBIx::Class::Core';
</span><span class='line'>
</span><span class='line'>__PACKAGE__->load_components(qw/
</span><span class='line'>  InflateColumn::DateTime
</span><span class='line'>  TimeStamp
</span><span class='line'>/);
</span><span class='line'>
</span><span class='line'>__PACKAGE__->meta->make_immutable;
</span><span class='line'>
</span><span class='line'>1;</span></code></pre></td></tr></table></div></figure>


<p>위의 두가지 코드를 작성 하였다면 준비는 끝났습니다.
(<strong>dbicdump는 db 정보를 덤프해서 스키마를 작성</strong>하는 것으로 코드 작성및 작성 후에라도
db가 정의 되어 있어야 합니다.)</p>

<h2>dbicdump 사용하기</h2>

<p>아래를 실행한후 lib/MyApp/Schema/Result에 .pm 파일들이 새로 생성되거나 수정 되었다면 확인을 해보라</p>

<pre><code>$ dbicdump -Ilib schema/schema.pl
</code></pre>

<h2>MakeFile.pl 모듈 추가</h2>

<p>다른 모듈이 더 추가 될수 있습니다 에러 메세지를 확인 하고 필요한 모듈을 더 설치 하세요.</p>

<pre><code>requires "DBIx::Class::TimeStamp";
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[catalyst]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/02/catalyst/"/>
    <updated>2012-07-02T18:13:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/02/catalyst</id>
    <content type="html"><![CDATA[<h1>DB confing 셋팅 정보</h1>

<pre><code>my $DB_NAME     = $ENV{DB_NAME}     || 'NAME';
my $DB_USER     = $ENV{DB_USER}     || 'USER';
my $DB_PASSWORD = $ENV{DB_PASSWORD} || 'PASSWORD';
</code></pre>

<h1>옵션 내용</h1>

<h2>DBIx::Class::Schema::Loader::Base</h2>

<pre><code>schema_class =&gt; name of the schema class we are building,
</code></pre>

<p>적용</p>

<pre><code>schema_class =&gt; "Project::Schema",
</code></pre>

<hr />

<ul>
<li>dump_directory</li>
</ul>


<p>The value of this option is a perl libdir pathname. Within that directory this module will create a baseline manual DBIx::Class::Schema module set, based on what it creates at runtime.</p>

<p>The created schema class will have the same classname as the one on which you are setting this option (and the ResultSource classes will be based on this name as well).</p>

<p>Normally you wouldn&#8217;t hard-code this setting in your schema class, as it is meant for one-time manual usage.</p>

<p>See &#8220;dump_to_dir&#8221; in DBIx::Class::Schema::Loader for examples of the recommended way to access this functionality.</p>

<p>적용</p>

<pre><code>dump_directory =&gt; 'lib',
</code></pre>

<hr />

<p>naming</p>

<p>Static schemas (ones dumped to disk) will, by default, use the new-style relationship names</p>

<p>and singularized Results, unless you&#8217;re overwriting an existing dump made by an older version</p>

<p>of DBIx::Class::Schema::Loader, in which case the backward compatible RelBuilder will be activated,</p>

<p>and the appropriate monikerization used.</p>

<p>Specifying</p>

<pre><code>naming =&gt; 'current'
</code></pre>

<p>will disable the backward-compatible RelBuilder and use the new-style relationship names along with singularized Results, even when overwriting a dump made with an earlier version.</p>

<p>The option also takes a hashref:</p>

<pre><code>naming =&gt; {
    relationships    =&gt; 'v8',
    monikers         =&gt; 'v8',
    column_accessors =&gt; 'v8',
    force_ascii      =&gt; 1,
}
</code></pre>

<p>or</p>

<pre><code>naming =&gt; { ALL =&gt; 'v8', force_ascii =&gt; 1 }
</code></pre>

<p>The keys are:</p>

<p>ALL</p>

<p>Set &#8220;relationships&#8221;, &#8220;monikers&#8221; and &#8220;column_accessors&#8221; to the specified value.</p>

<p>relationships</p>

<p>How to name relationship accessors.</p>

<p>monikers</p>

<p>How to name Result classes.</p>

<p>column_accessors</p>

<p>How to name column accessors in Result classes.</p>

<p>force_ascii</p>

<p>For &#8220;v8&#8221; mode and later, uses String::ToIdentifier::EN instead of String::ToIdentifier::EM::Unicode to force monikers and other identifiers to ASCII.</p>

<p>The values can be:</p>

<p>current</p>

<p>Latest style, whatever that happens to be.</p>

<p>v4</p>

<p>Unsingularlized monikers, has_many only relationships with no _id stripping.</p>

<p>v5</p>

<p>Monikers singularized as whole words, might_have relationships for FKs on UNIQUE constraints, _id stripping for belongs_to relationships.</p>

<p>Some of the _id stripping edge cases in 0.05003 have been reverted for the v5 RelBuilder.</p>

<p>v6</p>

<p>All monikers and relationships are inflected using Lingua::EN::Inflect::Phrase, and there is more aggressive _id stripping from relationship names.</p>

<p>In general, there is very little difference between v5 and v6 schemas.</p>

<p>v7</p>

<p>This mode is identical to v6 mode, except that monikerization of CamelCase table names is also done better (but best in v8.)</p>

<p>CamelCase column names in case-preserving mode will also be handled better for relationship name inflection (but best in v8.) See &#8220;preserve_case&#8221;.</p>

<p>In this mode, CamelCase &#8220;column_accessors&#8221; are normalized based on case transition instead of just being lowercased, so FooId becomes foo_id.</p>

<p>v8</p>

<p>(EXPERIMENTAL)</p>

<p>The default mode is &#8220;v7&#8221;, to get &#8220;v8&#8221; mode, you have to specify it in &#8220;naming&#8221; explicitly until 0.08 comes out.</p>

<p>&#8220;monikers&#8221; and &#8220;column_accessors&#8221; are created using String::ToIdentifier::EN::Unicode or String::ToIdentifier::EN if &#8220;force_ascii&#8221; is set; this is only significant for names with non-\w characters such as ..</p>

<p>CamelCase identifiers with words in all caps, e.g. VLANValidID are supported correctly in this mode.</p>

<p>For relationships, belongs_to accessors are made from column names by stripping postfixes other than _id as well, for example just Id, _?ref, _?cd, _?code and _?num, case insensitively.</p>

<p>적용</p>

<pre><code>naming =&gt; { ALL =&gt; 'v8' },
</code></pre>

<hr />

<p>relationships</p>

<p>How to name relationship accessors.</p>

<p>적용</p>

<pre><code>relationships =&gt; 1,

# 왜 여기만 1이지? ALL =&gt; v8이었는데?
</code></pre>

<hr />

<p>skip_load_external</p>

<p>Skip loading of other classes in @INC. The default is to merge all other classes with the same name found in @INC into the schema file we are creating.</p>

<p>적용</p>

<pre><code>skip\_load_external =&gt; 1,
</code></pre>

<hr />

<p>use_moose</p>

<p>Creates Schema and Result classes that use Moose, MooseX::NonMoose and MooseX::MarkAsMethods (or namespace::autoclean, see below). The default content after the md5 sum also makes the classes immutable.</p>

<p>It is safe to upgrade your existing Schema to this option.</p>

<p>적용</p>

<pre><code>use_moose          =&gt; 1,
</code></pre>

<hr />

<p>only_autoclean</p>

<p>By default, we use MooseX::MarkAsMethods to remove imported functions from your generated classes. It uses namespace::autoclean to do this, after telling your object&#8217;s metaclass that any operator overloads in your class are methods, which will cause namespace::autoclean to spare them from removal.</p>

<p>This prevents the &#8220;Hey, where&#8217;d my overloads go?!&#8221; effect.</p>

<p>If you don&#8217;t care about operator overloads, enabling this option falls back to just using namespace::autoclean itself.</p>

<p>If none of the above made any sense, or you don&#8217;t have some pressing need to only use namespace::autoclean, leaving this set to the default is recommended.</p>

<p>적용</p>

<pre><code>only_autoclean     =&gt; 1,
</code></pre>

<hr />

<p>col_collision_map</p>

<p>This option controls how accessors for column names which collide with perl methods are named. See &#8220;COLUMN ACCESSOR COLLISIONS&#8221; for more information.</p>

<p>This option takes either a single sprintf format or a hashref of strings which are compiled to regular expressions that map to sprintf formats.</p>

<p>Examples:</p>

<pre><code>col_collision_map =&gt; 'column_%s'

col_collision_map =&gt; { '(.*)' =&gt; 'column_%s' }

col_collision_map =&gt; { '(foo).*(bar)' =&gt; 'column_%s_%s' }
</code></pre>

<p>적용</p>

<pre><code>col_collision_map  =&gt; 'column_%s',
</code></pre>

<hr />

<p>result_base_class</p>

<p>Base class for your table classes (aka result classes). Defaults to &#8216;DBIx::Class::Core&#8217;.</p>

<p>적용</p>

<pre><code>result_base_class =&gt; 'Evid::Schema::ResultBase',
</code></pre>

<hr />

<p>overwrite_modifications</p>

<p>Default false. If false, when updating existing files, Loader will refuse to modify any Loader-generated code that has been modified since its last run (as determined by the checksum Loader put in its comment lines).</p>

<p>If true, Loader will discard any manual modifications that have been made to Loader-generated code.</p>

<p>Again, you should be using version control on your schema classes. Be careful with this option.</p>

<p>적용</p>

<pre><code>overwrite_modifications =&gt; 1,
</code></pre>

<hr />

<p>datetime_undef_if_invalid</p>

<p>Pass a 0 for this option when using MySQL if you DON&#8217;T want datetime_undef_if_invalid => 1 in your column info for DATE, DATETIME and TIMESTAMP columns.</p>

<p>The default is recommended to deal with data such as 00/00/00 which sometimes ends up in such columns in MySQL.</p>

<p>적용</p>

<pre><code>datetime_undef_if_invalid =&gt; 1,
</code></pre>

<hr />

<p>custom_column_info</p>

<p>Hook for adding extra attributes to the column_info for a column.</p>

<p>Must be a coderef that returns a hashref with the extra attributes.</p>

<p>Receives the table object (which stringifies to the unqualified table name), column name and column_info.</p>

<p>For example:</p>

<pre><code>custom_column_info =&gt; sub {
my ($table, $column_name, $column_info) = @_;

if ($column_name eq 'dog' &amp;&amp; $column_info-&gt;{default_value} eq 'snoopy') {
    return { is_snoopy =&gt; 1 };
}
},
</code></pre>

<p>적용</p>

<pre><code>{
loader_options =&gt; {
    custom_column_info =&gt; sub {
    my ($table, $col_name, $col_info) = @_;

    if ($col_name eq 'password') {
        return { %{ $col_info },
            encode_column =&gt; 1,
            encode_class  =&gt; 'Digest',
            encode_args   =&gt; { algorithm =&gt; 'SHA-1', format =&gt; 'hex' },
            encode_check_method =&gt; 'check_password' };
    }

    if ($col_name eq 'created_at') {
        return { %{ $col_info }, set_on_create =&gt; 1, inflate_datetime =&gt; 1 };
    }

    if ($col_name eq 'update_at') {
        return { %{ $col_info }, set_on_create =&gt; 1, set_on_update =&gt; 1, inflate_datetime =&gt; 1 };
    }

    if ($col_name eq 'data') {
        return { %{ $col_info }, serializer_class =&gt; 'JSON' };
    }
    },
},
}
</code></pre>

<hr />

<h2>cpan dbicdump</h2>

<pre><code>connect_info =&gt; {
dsn               =&gt; "dbi:mysql:$DB_NAME:127.0.0.1",
user              =&gt; $DB_USER,
pass              =&gt; $DB_PASSWORD,
mysql_enable_utf8  =&gt; 1,
},
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[catalyst]]></title>
    <link href="http://rumidier.github.com/blog/2012/06/25/catalyst/"/>
    <updated>2012-06-25T19:11:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/06/25/catalyst</id>
    <content type="html"><![CDATA[<h2>Error message</h2>

<p>기존에 사용되던 myweb.conf 파일의
ERROR 500.tt 메세지로 인해 에러 메세지가 제대로 보이지 않아
삭제 했습니다.</p>

<pre><code>$ vi myweb.conf
ERROR 500.tt 삭제
</code></pre>

<h2>Makefile.PL 모듈 추가</h2>

<pre><code>$ vi Makefile.PL
require DateTime::Format::MYSQL
</code></pre>

<h2>DB 날짜 입력</h2>

<p>lib/Silex/Web/Donnenwa/Controller/List.pm</p>

<p>등록시 날짜 생성을 위해 POSIX모듈을 사용합니다. 현재시간에</p>

<p>형식을 DB와 같이  &#8220;%Y-%m-%d% %H:%M:%S&#8221; 만들어 입력합니다.</p>

<pre><code>sub write :Local :Args(0) {
...
use POSIX qw(strftime);

my $time = strftime "%Y-%m-%d% %H:%M:%S", localtime;
my %row = (
applicant  =&gt; $c-&gt;req-&gt;params-&gt;{applicant},
title      =&gt; $c-&gt;req-&gt;params-&gt;{title},
content    =&gt; $c-&gt;req-&gt;params-&gt;{content},
created_on =&gt; "$time",
updated_on =&gt; "$time",
);
...
</code></pre>

<h2>list 페이지 쿼리문 수정</h2>

<p>lib/Silex/Web/Donnenwa/Controller/List.pm</p>

<p>생성될 날짜순으로 출력하기 위한 쿼리문 작성
search의 첫번째 인자는 where문으로써 무시 하기 위해서는 빈 해쉬레퍼를 줍니다.</p>

<pre><code>sub index :Path :Args(0) {
...
my $opt  = { 'order_by' =&gt; { -desc =&gt; 'me.created_on' } };
my $rs = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search({}, $opt);
...
</code></pre>

<h2>list.tt, list/view.tt 페이지 수정</h2>

<p>root/templates/bootstrap/src/list/index.tt
root/templates/bootstrap/src/list/view.tt</p>

<p>날짜 0000-00-00 형식으로 출력 지정</p>

<pre><code>&lt;td align=center height=20 bgcolor=white&gt;[% list.created_on.ymd %]
</code></pre>

<h2>기타</h2>

<p>날짜 관련 예제</p>

<pre><code>#!/usr/bin/env perl 

use 5.010;
use strict;
use warnings;
use POSIX qw(strftime);
use DateTime;

say "POSOX";
say POSIX::strftime('%Y-%m-%d %H:%M:%S', localtime);

say "DateTime";
say DateTime-&gt;now( time_zone =&gt; 'local' )-&gt;strftime('%Y-%m-%d %H:%M:%S');
</code></pre>
]]></content>
  </entry>
  
</feed>
