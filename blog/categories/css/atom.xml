<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | Meadows of wild horses]]></title>
  <link href="http://rumidier.github.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://rumidier.github.com/"/>
  <updated>2012-11-26T18:23:16+09:00</updated>
  <id>http://rumidier.github.com/</id>
  <author>
    <name><![CDATA[rumidier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sass]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/26/sass/"/>
    <updated>2012-11-26T18:08:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/26/sass</id>
    <content type="html"><![CDATA[<h3>CSS Extensions</h3>

<h4>Nested Rules</h4>

<p>.scss 중첩 규칙의 일반적인 사용법</p>

<p>example-01.scss</p>

<pre><code>#main p {
  color: #00ff00;
  width: 97%;

  .redbox {
    boackground-color: #ff0000;
    color: #0000;
  }
}
</code></pre>

<p>example-01.css</p>

<pre><code>#main p {
  color: #00ff00;
  wdth: 97%; }
  #main p .redbox {
    background-color: #ff0000;
    color: #000000; }
</code></pre>

<p>example-02.scss</p>

<pre><code>#main {
  width: 97%;

  p, div {
    font-size: 2em;
    a { font-weight: bold; }
  }
  pre { font-size: 3em; }
}
</code></pre>

<p>example-02.css</p>

<pre><code>#mian {
  width: 97%; }
  #mian p, #main div {
    font-size: 2em; }
    #mian p a, #main div a {
      font-weight: bold; }
  #main pre {
    font-size: 3em; }
</code></pre>

<h4>Referencing Parent Selectors: &amp;</h4>

<p>'&amp;'를 사용함으로서 부모 셀렉터를 상속 받을수 있습니다.</p>

<p>example-03.scss</p>

<pre><code>a {
  font-weight: bold;
  text-decoration: none;
  &amp;:hover { text-decoration: underline; }
  body.firefox &amp; { font-weight: normal; }
}
</code></pre>

<p>example-03.css</p>

<pre><code>a {
  font-weight: bold;
  text-decoration: none; }
  a:hover {
    text-decoration: underline; }
  body.firefox a {
    font-weight: normal; }
</code></pre>

<p>example-04.scss</p>

<pre><code>#main {
  color: black;
  a {
    font-weight: bold;
    &amp;:hover { color: red; }
  }
}
</code></pre>

<p>example-04.css</p>

<pre><code>#main {
  color: black; }
  #main a {
    font-weight: bold; }
      #main a:hover {
        color: red; }
</code></pre>

<h4>Nested Properties</h4>

<p>Nested의 또 다른 기능으로 특성들을 상속 합니다.</p>

<p>example-05.scss</p>

<pre><code>.funky {
  font: {
    family: fantasy;
    size: 30em;
    weight: bold;
  }
}
</code></pre>

<p>example-05.css</p>

<pre><code>.funky {
  font-family: fantasy;
  font-szie: 30em;
  font-weight: bold; }
</code></pre>

<p>example-06.scss</p>

<pre><code>.funky {
  font: 2px/3px {
    family: fantasy;
    size: 30em;
    weight: bold;
  }
}
</code></pre>

<p>example-06.css</p>

<pre><code>.funky {
  font: 2px/3px;
    font-family: fantasy;
    font-size: 30em;
    font-weight: bold; }
</code></pre>

<h4>Comments: /* */ and //</h4>

<p>example-07.scss</p>

<p>//한줄 주석으로 변환시 .css에 없고 /* */ 다중 주석 문으로 .css변환시에도 남아 있습니다.</p>

<pre><code>/* multiple line
   is not delete in css */
body { color: black; }   
// one line is delete in css
a { color: green; }
</code></pre>

<p>example-07.css</p>

<pre><code>/* multiple line
   is not delete in css */
body { color: black; }
a { color: green; }
</code></pre>

<h4>Variables: $</h4>

<p>.scss의 변수는 $에 선언 합니다.</p>

<p>example-08.scss</p>

<pre><code>$width: 5em;
#main {
  width: $width;
}
</code></pre>

<p>example-08.css</p>

<pre><code>#main {
  width: 5em;
}
</code></pre>

<h4>Strings</h4>

<p>문자열은 #{$string}를 통해서 사용 할수 있습니다.</p>

<p>example-09.scss</p>

<pre><code>@mixin firefox-message($selector) {
  body.firefox #{$selector}:before {
    content: "Hi, Firefox users!";
  }
}
@include firefox-message(".header");
</code></pre>

<p>example-09.css</p>

<pre><code>body.firefox .header:before {
  content: "Hi, Firefox users!"; }
</code></pre>

<h4>Number Operations</h4>

<p>in와 pt를 같이 사용하면 in로 변환되어 계산 됩니다.</p>

<p>example-10.scss</p>

<pre><code>p {
  width: 1in + 8pt;
}
</code></pre>

<p>example-10.css</p>

<pre><code>p {
  width: 1.111in }
</code></pre>

<h4>Division and /</h4>

<p>example-11.scss</p>

<p>margin-left 처럼 다른 인자와 연산을 하지 않으면 .css변환시 표기대로 변환 됩니다.</p>

<pre><code>p {
  font: 10px/8px;
  $width: 1000px;
  width: $width/2;
  height: (500px/2);
  margin-left: 5px + 8px/2px;
}
</code></pre>

<p>example-11.css</p>

<pre><code>p {
  font: 10px/8px;
  width: 500px;
  height: 250px;
  margin-left: 9px;
}
</code></pre>

<p>example-12.scss</p>

<p>변수에 할당하여 연산할수도 있습니다.</p>

<pre><code>p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size}/#{$line-height};
}
</code></pre>

<p>example-12.css</p>

<pre><code>p {
  font: 12px/30px; }
</code></pre>

<h4>Color Operations</h4>

<p>example-13.scss</p>

<p>Color의 덧셈 입니다.</p>

<pre><code>p {
  color: #010203 + #040506;
}
</code></pre>

<p>example-13.css</p>

<pre><code>p {
  color: #050709; }
</code></pre>

<p>example-14.scss</p>

<p>Color의 곱셈 입니다.</p>

<pre><code>p {
  color: #010203 * 2;
}
</code></pre>

<p>example-14.css</p>

<pre><code>p {
  color: #020406; }
</code></pre>

<p>example-15.scss</p>

<p>rgba의 값들간에만 더하기를 합니다. 최소 값은 0이며 양측 덧셈 최대값은 255 입니다. 투명도가 동일 값이어야만 계산이 됩니다.</p>

<pre><code>p {
  color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);
}
</code></pre>

<p>example-15.css</p>

<pre><code>p {
  color: rgba(255, 255, 0, 0.75); }
</code></pre>

<p>example-16.scss</p>

<p>opacify는 투명도값을 덧셈하고 transparentize는 0.5의 값을 0.25로 변경합니다.</p>

<pre><code>$translucent-red: rgba(255, 0, 0, 0.5);
p {
  color: opacify($translucent-red, 0.3);
  background-color: transparentize($translucent-red, 0.25);
}
</code></pre>

<p>example-16.css</p>

<pre><code>p {
  color: rgba(255, 0, 0, 0.8);
  background-color: rgba(255, 0, 0, 0.25); }
</code></pre>

<h4>String Operations</h4>

<p>example-17.scss</p>

<p>문자열의 덧셈을 보여 주고 있습니다.</p>

<pre><code>p {
  cursor: e + -resize;
}
</code></pre>

<p>example-17.css</p>

<pre><code>p {
  cursor: e-resize; }
</code></pre>

<p>example-18.scss</p>

<p>공백을 포함한 문자열의 덧셈을 보여 줍니다.</p>

<pre><code>p:before {
  content: "Foo " + Bar;
  font-family: sans- + "serif";
}
</code></pre>

<p>example-18.css</p>

<pre><code>p:before {
  content: "Foo Bar";
  font-family: sans-serif; }
</code></pre>

<p>example-19.scss</p>

<p>px값과 auto 인자가 있을시 ( ) 없이도 px값 만 계산 합니다.</p>

<pre><code>p {
  margin: 3px + 4px auto;
}
</code></pre>

<p>example-19.css</p>

<pre><code>p {
  margin: 7px auto; }
</code></pre>

<p>example-20.scss</p>

<p>문자열 치환도 가능 합니다.</p>

<pre><code>p:before {
  content: "I ate #{5 + 10} pies!";
}
</code></pre>

<p>example-20.css</p>

<pre><code>p:before {
  content: "I ate 15 pies!"; }
</code></pre>

<p>example-21.scss</p>

<p>변수 값이 null일시 무시 합니다.</p>

<pre><code>$value: null;
  p:before {
  content: "I ate #{$value} pies!";
}
</code></pre>

<p>example-21.css</p>

<pre><code>p:before {
  content: "I ate pies!"; }
</code></pre>

<h4>Parentheses</h4>

<p>example-22.scss</p>

<p>( )우선 순위로 계산 합니다.</p>

<pre><code>p {
  width: 1em + (2em * 3);
}
</code></pre>

<p>example-22.css</p>

<pre><code>p {
  width: 7em;
}
</code></pre>

<h4>Functions</h4>

<p>HSL ($hue, $saturation, $lightness), (색깔, 채도, 밝기)
example-23.scss</p>

<pre><code>p {
  color: hsl(0, 100%, 50%);
}

example-23.css

p {
  color: red; }
</code></pre>

<h4>Interpolation: #{}</h4>

<p>example-24.scss</p>

<p>문자 보간 하는 방법 입니다. foo와 border를 치환 합니다.</p>

<pre><code>$name: foo;
$attr: border;
p.#{$name} {
  #{$attr}-color: blue;
}
</code></pre>

<p>example-24.css</p>

<pre><code>p.foo {
  border-color: blue;
}
</code></pre>

<p>example-25.scss</p>

<p>px 값들 또한 보간할수 있습니다.</p>

<pre><code>p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size} / #{$line-height};
}
</code></pre>

<p>example-25.css</p>

<pre><code>p { font: 12px / 30px; }
</code></pre>

<h4>Variable Defaults: !default</h4>

<p>example-26.scss</p>

<p>$content값이 참인지 분별하여 참이 아니면 "Second content?"값을 부여 합니다. 참이므로 $content는 "First.."가 됩니다.
$new_content는 참이 아니므로 "First time…"을 출력 합니다.</p>

<pre><code>$content: "First content";
$content: "Second content?" !default;
$new_content: "First time reference" !default;

#main {
  ccontent: $content;
  new-content: $new_content;
}
</code></pre>

<p>example-26.css</p>

<pre><code>#main {
  content: "First content";
  new-content: "First time reference";
}
</code></pre>

<p>example-27.scss</p>

<p>$content의 값이 null이므로 !default가 동작 합니다.</p>

<pre><code>$content: null;
$content: "Non-null content" !default;

#main {
  content: $content;
}
</code></pre>

<p>example-27.css</p>

<pre><code>#main {
  content: "Non-null content";
}
</code></pre>

<h2>@-Rules and Directives</h2>

<h4>import</h4>

<p>example-28.scss example</p>

<pre><code>@import "foo.scss";
or
@import "foo";
</code></pre>

<p>example-28-01.scss example</p>

<pre><code>@import "foo.css";
@import "foo" screen;
@import "http://foo.com/bar";
@import url(foo);
</code></pre>

<p>example-28-01.css</p>

<pre><code>@import "foo.css";
@import "foo" screen;
@import "http://foo.com/bar";
@import url(foo);
</code></pre>

<h4>multiple import</h4>

<p>여러개의 파일을 import할수 있습니다.</p>

<pre><code>@import "rounded-corners", "text-shadow";
</code></pre>

<h4>interpolation #{}</h4>

<p>unqoute를 사용함으로써 변환시 문자열에 "" 제거 할수 있습니다.</p>

<pre><code>$family: unquote("Droid-Sans");
@import url("http://fonts.googleapis.com/css?family=\#{$family}");
</code></pre>

<h4>Partials</h4>

<p>colors로 import를 하게 되면 기본적으로 .css 파일이 없는 상태에서 _color.scss파일을 import하게 되고 이도 없으면 비슷한 color.scss파일을 import합니다.</p>

<pre><code>@import "colors";
</code></pre>

<h4>Nested @import</h4>

<p>{ }에서 import를 하게 되면 selector 네임이 중첩 됩니다.</p>

<p>example-29.scss</p>

<pre><code>.example {
  color: red;
}
</code></pre>

<p>example-29-01.scss</p>

<pre><code>#main {
  @import: "example";
}
</code></pre>

<p>example-29-01.css</p>

<pre><code>#main .example {
  color: red;
}
</code></pre>

<h4>@media</h4>

<pre><code>.sidebar {
  width: 300px;
  @media screen and (orientation: landscape) {
    width: 500px;
  }
}
</code></pre>

<p>compile</p>

<pre><code>.sidebar {
  width: 300px; }
  @media screen and (orientation: landscape) {
    .sidebar {
    width: 500px; } }
</code></pre>

<p>@media .scss</p>

<pre><code>@media screen {
  .sidebar {
    @media (orientation: landscape) {
      width: 500px;
    }
  }
}
</code></pre>

<p>compile</p>

<pre><code>@media screen and (orientation: landscape) {
  .sidebar {
    width: 500px; } }
}
</code></pre>

<p>@media .scss</p>

<pre><code>$media: screen;
$feature: -webkit-min-device-pixel-ratio;
$value: 1.5;

@media #{$media} and ($feature: $value) {
  .sidebar {
    width: 500px; } }
}
</code></pre>

<p>compile</p>

<pre><code>@media screen and (-webkit-min-device-pixel-ratio: 1.5) {
  .sidebar {
    width: 500px; } }
}
</code></pre>

<h4>@extend</h4>

<p>markup</p>

<pre><code>&lt;div class="error seriousError"&gt;
  Oh no! You've been hacked!
&lt;/div&gt;
</code></pre>

<p>styles -> 뭔가 문제가 있다는데?</p>

<pre><code>.error {
  border: 1px #f00;
  background-color: #fdd;
}
.seriousError {
  border-width: 3px;
}
</code></pre>

<p>다른 styles</p>

<pre><code>.error {
  border: 1px #f00;
  background-color: #fdd;
}
.seriousError {
  @extend .error;
  border-width: 3px;
}
</code></pre>

<p>markup</p>

<pre><code>&lt;div class="error seriousError"&gt;
  Oh no! You've been hacked!
&lt;/div&gt;
&lt;div class="seriousError intrusion"&gt;&lt;/div&gt;
</code></pre>

<p>다른 스타일 추가</p>

<pre><code>.error.intrusion {
  background-image: url("/image/hacked.png");
}
</code></pre>

<p>How i Workd</p>

<p>example</p>

<pre><code>.error {
  border: 1px #f00;
  background-color: #fdd;
}
.error.intrusion {
  background-image: url("/image/hacked.png");
}
.seriousError {
  @extend .error;
  border-width: 3px;
}
</code></pre>

<p>compile</p>

<pre><code>.error, .seriousError {
  border: 1px #f00;
  background-color: #fdd;
}
.error.intrusion, .seriousError.intrusion {
  background-image: url("/image/hacked.png");
}
.seriousError {
  border-width: 3px;
}
</code></pre>

<h4>Extending Complex Selectors</h4>

<p>.scss example</p>

<pre><code>.hoverlink {
  @extend a:hover;
}
a:hover {
  text-decoration: underline;
}
</code></pre>

<p>compile</p>

<pre><code>a:hover, .hoverlink {
  text-decoration: underline;
}
</code></pre>

<p>.scss example</p>

<pre><code>.hoverlink {
  @extend a:hover;
}
.comment a.user:hover {
  font-weight: bold;
}
</code></pre>

<p>compile</p>

<pre><code>.comment a.user:hover, .comment .user.hoverlink {
  font-weight: bold;
}
</code></pre>

<h4>Multiple Extends</h4>

<p>.scss</p>

<pre><code>.error {
  border: 1px #f00;
  background-color: #fdd;
}
.attention {
  font-size: 3em;
  background-color: #ff0;
}
.seriousError {
  @extend .error;
  @extend .attention;
  border-width: 3px;
}
</code></pre>

<p>.compile</p>

<pre><code>.error, .seriousError {
  border: 1px #f00;
  background-color: #fdd;
}
.attention, .seriousError {
  font-size: 3em;
  background-color: #ff0;
}
.seriousError {
  border-width: 3px;
}
</code></pre>

<h4>Chanining Extends</h4>

<p>example.scss</p>

<pre><code>.error {
  border: 1px #f00;
  background-color: #fdd;
}
.seriousError {
  @extend .error;
  border-width: 3px;
}
.criticalError {
  @extend .seriousError;
  position: fixed;
  top: 10%;
  bottom: 10%;
  left: 10%;
  right: 10%;
}
</code></pre>

<p>example.css</p>

<pre><code>.error, .seriousError, .criticalEroor {
  border: 1px #f00;
  background-color: #fdd;
}
.seriousError, .criticalError {
  border-width: 3px;
}
.criticalError {
  position: fixed;
  top: 10%;
  bottom: 10%;
  left: 10%;
  right: 10%;
}
</code></pre>

<h4>Selector Sequences</h4>

<p>example.scss</p>

<pre><code>#fake-links .link {
  @extend a;
}

a {
  color: blue;
  &amp;:hover {
    text-decoration: underline;
  }
}
</code></pre>

<p>example.css</p>

<pre><code>a, #fake-links .link {
  color: blue;
}
  a:hover, #fakelinks .link:hover {
    text-decoration: underline;
  }
</code></pre>

<h4>Merging Selector Sequences</h4>

<p>두개의 다른 시퀀스를 @extend 할때는 첫번재 시퀀스, 첫번재 + 두번째 시퀀스, 두번째 시퀀스 + 첫번째 시퀀스를 한다. 마지막 셀렉터 .fakelink는 두번재 + 첫번재 시퀀스 뒤에 오게 됩니다.(왜?)</p>

<p>example.scss</p>

<pre><code>#admin .tabbar a {
  font-weight: bold;
}
#demo .overview .fakelink {
  @extend a;
}
</code></pre>

<p>example.css</p>

<pre><code>#admin .tabbar a,
#admin .tabbar #demo .overview .fakelink,
#demo .overview #admin .tabbar .fakelink {
  font-weight: bold;
}
</code></pre>

<p>두개의 시퀀스에 같은 셀렉터가 있을때.</p>

<p>example.scss</p>

<pre><code>#admin .tabbar a {
  font-weight: bold;
}
#admin .overview .fakelink {
  @extend a;
}
</code></pre>

<p>example.css</p>

<pre><code>#admin tabbar a,
#admin .tabbar .overview fakelink,
#admin .overview .tabbar .fakelink {
  font-weight: bold;
}
</code></pre>

<h4>@extend-Only Selectors</h4>

<p>(잘 모르겠음))
example.scss</p>

<pre><code>#context a%extreme {
  color: blue;
  font-weight: bold;
  font-size: 2em;
}
.notice {
  @extend %extreme;
}
</code></pre>

<p>example.css</p>

<pre><code>#context a.notice {
  color: blue;
  font-weight: bold;
  font-size: 2ex;
}
</code></pre>

<h4>The !optional Flag</h4>

<p>(잘 모르겠음)</p>

<h4>@extend in Directives</h4>

<h4>@debug</h4>

<h4>@warn</h4>

<h2>Control Directives</h2>

<h4>@if</h4>

<p>example.scss</p>

<pre><code>p {
  @if 1 + 1 == 2 { border: 1px solid; }
  @if 5 &lt; 3      { border: 2px dotted; }
  @if nul        { border: 3px double; }
}
</code></pre>

<p>example.css</p>

<pre><code>p {
  border: 1px solid;
  border: 3px double;
}
</code></pre>

<h4>@if @else</h4>

<p>example.scss</p>

<pre><code>$type: monster;
p {
  @if $type == ocean {
    color: blue;
  } @else if $type == matador {
    color: red;
  } @else if $type == monster {
    color: green;
  } @else {
    color: black;
  }
}
</code></pre>

<p>example.css</p>

<pre><code>p {
  color: green;
}
</code></pre>

<h4>@for</h4>

<p>example.scss</p>

<pre><code>@for $i from 1 through 3 {
  .item-#{$i} { width: 2em * $i; }
}
</code></pre>

<p>example.css</p>

<pre><code>.item-1 {
  width: 2em;
}
.item-2 {
  width: 4em;
}
.item-3 {
  width: 6em;
}
</code></pre>

<h4>@each</h4>

<p>example.scss</p>

<pre><code>@each $animal in puma, sea-slug, egret, salamander {
  .#{$animal}-icon {
    background-image: url('/images/#{animal}.png');
  }
}
</code></pre>

<p>example.css</p>

<pre><code>.puma-icon {
  background-image: url('/images/puma.png');
}
.sea-slug {
  background-image: url('/images/sea-slug.png');
}
.egret {
  background-image: url('/images/egret.png');
}
.salamander {
  background-image: url('/images/salamander.png');
}
</code></pre>

<h4>@while</h4>

<p>example.scss</p>

<pre><code>$i: 6;
@while $i &gt; 0 { 
  .item-#{$i} { width: 2em * $i; }
  $i: $i - 2;
}
</code></pre>

<p>example.css</p>

<pre><code>.item-6 {
  width: 12em;
}
.item-4 {
  width: 8em;
}
.item-2 {
  width: 4em;
}
</code></pre>

<h3>Mixin Directives</h3>

<h4>Defining a Mixin: @mixin</h4>

<p>example.scss</p>

<pre><code>@mixin large-text {
  font: {
    family: Arial;
    size: 20px;
    weight: bold;
  }
  color: #ff0000;
}
</code></pre>

<h5>Mixins contain parent reference</h5>

<p>example.scss</p>

<pre><code>@mixin clearfix {
  display: inline-block;
  &amp;:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
  * html &amp; { height: 1px }
}
</code></pre>

<h4>Including a Mixin: @include</h4>

<p>example.scss</p>

<pre><code>@mixin large-text {
  font: {
    family: Arial;
    size: 20px;
    weight: bold;
  }
  color: #ff0000;
}

.page-title {
  @include large-text;
  padding: 4px;
  margin-top: 10px;
}
</code></pre>

<p>example.css</p>

<pre><code>.page-title {
  font-family: Arial;
  font-size: 20px;
  font-weight: bold;
  color: #ff0000;
  padding: 4px;
  margin-top: 10px;
}
</code></pre>

<p>example.scss</p>

<pre><code>@mixin silly-links {
  a {
    color: blue;
    background-color: red;
  }
}

@include silly-links;
</code></pre>

<p>example.css</p>

<pre><code>a {
  color: blue;
  background-color: red;
}
</code></pre>

<h5>Mixin 안에 Mixin @include</h5>

<p>example.scss</p>

<pre><code>@mixin compound {
  @include highlighted-background;
  @include header-text;
}

@mixin highlighted-background { background-color: #fc0; }
@mixin header-text { font-size: 20px; }
</code></pre>

<h4>Arguments</h4>

<p>example.scss</p>

<pre><code>@mixin sexy-border($color, $witdh) {
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}

p { @include secy-border(blue, 1in); }
</code></pre>

<p>example.css</p>

<pre><code>p {
  border-color: blue;
  border-width: 1in;
  border-style: dashed;
}
</code></pre>

<h5>Mixin default value</h5>

<p>example.scss</p>

<pre><code>@mixin sexy-border($color, $width: 1in) {
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}
p { @include sexy-border(blue); }
h1 { @include sexy-border(blue, 2in); }
</code></pre>

<p>example.css</p>

<pre><code>p {
  border-color: blue;
  border-width: 1in;
  border-style: dashed;
}
h1 {
  border-color: blue;
  border-width: 2in;
  border-style: dashed;
}
</code></pre>

<h4>Keyword Arguments</h4>

<p>example.scss</p>

<pre><code>p { @include sexy-border($color: blue); }
h1 { @include sexy-border($color: blue, $width: 2in); }
</code></pre>

<h4>Varialbe Arguments</h4>

<p>example.scss</p>

<pre><code>@mixin box-shadow($shadows…) {
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
  box-shadow: $shadows;
}
.shadows {
  @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}
</code></pre>

<p>example.css</p>

<pre><code>.shadowed {
  -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;
  -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;
  box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;
}
</code></pre>

<h5>Variable arguments calling a mixin</h5>

<p>example.scss</p>

<pre><code>@mixin colors($text, $background, $border) {
  color: $text;
  background-color: $background;
  border-color: $border;
}

$values: #ff0000, #00ff00, #0000ff;
.primary {
  @include colors($values…);
}
</code></pre>

<p>example.css</p>

<pre><code>.primary {
  color: #ff0000;
  background-color: #00ff00;
  border-color: #0000ff;
}
</code></pre>

<h5>wrap mixin and add styles change argument</h5>

<pre><code>@mixin wrapped-stylish-mixin($args…) {
   font-weight: bold;
   @include stylish-mixin($args…);
}
.stylish {
  @include wrapped-stylish-mixin(#00ff00, $width: 100px);
}
</code></pre>

<h4>Passing Content Blocks to a Mixin</h4>

<p>example.scss</p>

<pre><code>@mixin apply-to-ie6-only {
  * html {
    @content;
  }
}
@include apply-to-ie6-only {
  #logo {
    background-image: url(/logo.gif);
  }
}
</code></pre>

<p>example.css</p>

<pre><code>* html #logo {
  background-image: url(/logo.gif);
}
</code></pre>

<h4>Variable Scope and Content Blocks</h4>

<p>example.scss</p>

<pre><code>$color: white;
  @mixin colors($color: blue) {
  background-color: $color;
  @content;
  border-color: $color;
}
.colors {
  @include colors { color: $color; }
}
</code></pre>

<p>example.css</p>

<pre><code>.colors {
  background-color: blue;
  color: white;
  border-color: blue;
}
</code></pre>

<p>example-02.scss</p>

<pre><code>#sidebar {
  $sidebar-width: 300px;
  width: $sidebar-width;
  @include smartphone {
    width: $sidebar-width / 3;
  }
}
</code></pre>

<h4>Function Directives</h4>

<p>example.scss</p>

<pre><code>$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
  @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar { width: grid-width(5); }
</code></pre>

<p>example.css</p>

<pre><code>#sidebar {
  width: 240px; }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less tutorial]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/21/less-tutorial/"/>
    <updated>2012-11-21T12:44:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/21/less-tutorial</id>
    <content type="html"><![CDATA[<h2>Tutorial</h2>

<h3>Variables(변수)</h3>

<p>변수 선언은 '@' 연산자를 사용 합니다. 변수에 값을 정의 함으로써 광범위 하게 사용 할수 있습니다.</p>

<p>example.less</p>

<pre><code>@color: #4D926F

#header {
  color: @color;
}
h2 {
  color: @color;
}
</code></pre>

<p>compile.css</p>

<p>.css로 변환 하면 @color의 값으로 치환됩니다.</p>

<pre><code> #header {
   color: #4D926F;
 }
 h2 {
   color: #4D926F;
 }
</code></pre>

<h3>Mixins(믹스 인)</h3>

<p>믹스인은 클래스 처럼 사용 가능 하며 클래스에서 설정한 모든 속성을 포함시킬수 있습니다. 또한, 함수와 같이 인수를 설정 할수도 있습니다.</p>

<p>example.less</p>

<pre><code>.rounded-corners (@radius: 5px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  -ms-border-radius: @radius;
  -o-border-radius: @radius;
  border-radius: @radius;
}

#header {
  .rounded-corners;
}
#footer {
  .rounded-corners(10px);
}
</code></pre>

<p>compile.css</p>

<p>.rounded-coners를 선언 하였고 기본 인수는 @radius 5px입니다. #header는 기본 인수를 사용 하였고 #footer는 사용자 인수를 사용 하여서 10px이 되었습니다.</p>

<pre><code>.rounded-corners (@radius: 5px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  -ms-border-radius: @radius;
  -o-border-radius: @radius;
  border-radius: @radius;
}

#header {
  -webkt-boder-radius: 5px;
  -moz-border-radius: 5px;
  -ms-border-radius: 5px;
  -o-border-radius: 5px;
  border-radius: 5px;
}
#footer {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  -o-border-radius: 10px;
  border-radius: 10px;
}
</code></pre>

<h3>Nested Rules(중첩 규칙)</h3>

<p>선택기를 중첩하여 상속 할수 있으므로 긴 이름의 선택기를 중복으로 사용하지 않고도 명확하고 짧게 사용할수 있습니다.</p>

<p>example.less</p>

<pre><code>#header {
  h1{
    font-size: 26px;
    font-weight: bold;
  }
  p {
    font-size: 12px;
    a {
      text-decoration: none;
      &amp;:hover { border-width: 1px }
    }
  }
}
</code></pre>

<p>compile.css</p>

<p>.less 에서 쓰인 한번 쓰인 #heder 선택기가 중복으로 적용됩니다.</p>

<pre><code>#header h1 {
  font-size: 26px;
  font-weight: bold;
}    
#header p {
  font-size: 12px;
}
#header p a {
  text-decoration: none;
}
#header p a:hover { border-width: 1px }
</code></pre>

<h3>Functions &amp; Operations(함수와 연산)</h3>

<p>연산은 색이나 숫자에 대해 덧셈, 뺄셈, 나눗셈, 곱셈을 할수 있습니다. 속성 사이에 복잡한 연산은 CSS의 호환성을 위해
괄호 내에서만 실행 됩니다.</p>

<p>example.less</p>

<pre><code>@the-border: 1px;
@base-color: #111;
@red: #842210;

#header {
  color: @base-color * 3;
  border-left: @the-border;
  border-right: @the-border * 2;
}
#footer {
  color: @base-color + #003300;
  border-color: desaturate( @red, 10%);
}
</code></pre>

<p>compile.css</p>

<pre><code>#header {
  color: #333;
  border-left: 1px;
  border-right: 2px;
}    
#footer {
  color: #114411;
  border-color: #7d2717
}
</code></pre>

<h2>The Language</h2>

<h3>Variables(변수)</h3>

<p>LESS에서 변수는 실제로 상수로 기억되며 변수는 오직 한번만 정의 됩니다.</p>

<p>example-01.less</p>

<p>@nice-blue 변수를 선언하고 + 연산을 합니다.</p>

<pre><code>@nice-blue: #5B83AD;
@light-blue: (@nice-blue + #111);

#header { color: @light-blue; }
</code></pre>

<p>example-01.css</p>

<pre><code>#header { color: #6c94be; }
</code></pre>

<p>example-02.less - 변수에 다른 변수가 정의 가능합니다.</p>

<p>@var에 문자열 'fnord'는 @fnord로 치환 됩니다.</p>

<pre><code>@fnord: "I am fnord";
@var: 'fnord';
content: @@var;
</code></pre>

<p>example-02.css</p>

<pre><code>content: "I am fnord"
</code></pre>

<h3>Mixins</h3>

<p>Mixin은 이름을 사용해 선언 할수 있고 클래스 처럼 동작 합니다.</p>

<p>example-03.less</p>

<pre><code>.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
</code></pre>

<p>example-03.less</p>

<p>클래스 이름을 사용해 속성을 포함 시킬수있습니다.</p>

<pre><code>.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}

#menu a {
  color: #111;
  .bordered;
}
.post a {
  color: red;
  .bordered;
}
</code></pre>

<p>example-03.css</p>

<p>선언된 .bordered는 .css에서 보이지 않으며 치환 된채로 컴파일 됩니다.</p>

<pre><code>#menu a {
  color: #111;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
.post a {
  color: red;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
</code></pre>

<h3>Parametric Mixins</h3>

<p>example-04.less</p>

<p>클래스 처럼 믹스인 할수 있으며, 매개변수를 전달할수 있습니다.</p>

<pre><code>.border-radius (@radius) {
  border-radius: @radius;
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
}

#header {
  .border-radius(4px);
}
.button {
  .border-radius(6px);
}
</code></pre>

<p>example-04.css</p>

<p>.button의 6px, #header에 4px 값을 전달 받아 선언합니다.</p>

<pre><code>#header {
  border-radius: 4px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
}
.button {
  border-radius: 4px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
}
</code></pre>

<p>example-05.less</p>

<p>매개 변수가 유효한 mixin은 기본값을 가질수 있습니다</p>

<pre><code>.border-radius (@radius: 5px) {
  border-radius: @radius;
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
}
#header {
  .border-radius;
}
</code></pre>

<p>example-05.css</p>

<p>매개 변수 전달 없이 기본값을 사용 합니다.</p>

<pre><code>#header {
  border-radius: 5px;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
}
</code></pre>

<p>example-06.less</p>

<pre><code>.wrap () {
    text-wrap: wrap;
    white-space: pre-wrap;
    white-space: -moz-pre-wrap;
    word-wrap: break-word;
}
pre { .wrap }
</code></pre>

<p>example-06.css</p>

<pre><code>pre {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}
</code></pre>

<h4>The @arguments varialbe</h4>

<p>@arguments를 사용해서 개별적으로 파라미터를 사용 하지 않아도 됩니다.</p>

<p>example-07.less</p>

<p>2px, 5px 두개의 인수를 전달 하면 순서대로 @x, @y에 적용 됩니다.</p>

<pre><code>.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #000) {
  box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  -webkit-box-shadow: @arguments;
}

.box-shadow(2px, 5px);
</code></pre>

<p>example-07.css</p>

<p>0, 0값에서 전달된 2px, 5px값으로 치환 되었습니다.</p>

<pre><code>.box-shadow: 2px 5px 1px #000;
-moz-box-shadow: 2px 5px 1px #000;
-webkit-box-shadow: 2px 5px 1px #000;
</code></pre>

<h2>Pattern-matching and Guard expressions</h2>

<p>mixin을 선언하고 조건문으로 인자를 비교해 같은 이름의 .mixin중에 참인 .mixin을 적용 합니다.</p>

<p>변경 기본 문법</p>

<p>basic-01.less</p>

<pre><code>.mixin (@s, @color) {
    ….
}
.class {
  .mixin(@switch, #888);
}
</code></pre>

<p>basic-02.less</p>

<pre><code>.mixin (dark, @color) {
  color: darken(@color, 10%);
}
.mixin (light, @color) {
  color: lighten(@color, 10%);
}
.mixin (@), @color) {
  display: block;
}
</code></pre>

<p>example-08.less</p>

<p>.mixin이 3개가 선언 되었고 각 다른 조건문을 가지고 있습니다.</p>

<pre><code>.mixin (dark, @color) {
  color: darken(@color, 10%);
}
.mixin (light, @color) {
  color: lighten(@color, 10%);
}
.mixin (@_, @color) {
  display: block;
}

@switch: light;
.class {
  .mixin(@switch, #888);
}
</code></pre>

<p>example-08.css</p>

<p>호출시 조건문 light값을 충족하며 모든 값을 의미 하는 '@_'포함 하여 적용 됩니다.</p>

<pre><code>.class {
  color: #a2a2a2;
  display: black;
}
</code></pre>

<p>조건문으로 인수의 개수에 따라서 선택 할수도 있습니다.</p>

<pre><code>.mixin (@a) {
  color: @a;
}
.mixin (@a, @b) {
  color: fade(@a, @b);
}
</code></pre>

<h2>Guards</h2>

<p>가드는 값이나 변수의 개수가 아니라 식에 일치 시킵니다.</p>

<p>example-09.less</p>

<p>if/else 대신 when을 사용 합니다. @a값을 비교하여 적용 하며 인자가 하나이므로 color는 전체에 적용 됩니다.</p>

<pre><code>.mixin (@a) when (lightness(@a) &gt;= 50%) {
  background-color: black;
}
.mixin (@a) when (lightness(@a) &lt; 50%) {
  background-color: white;
}
.mixin (@a) {
  color: @a;
}
.class1 { .mixin(#ddd) }
.class2 { .mixin(#555) }
</code></pre>

<p>example-09.css</p>

<p>값에 비교에 따른 적용과 전체 적용된 color 입니다.</p>

<pre><code>.class1 {
  color: #ddd;
  background-color: black;
}
.class2 {
  color: #555;
  background-color: white;            
}
</code></pre>

<p>가드 안에서는 비교식(>, >=, =, =&lt;, &lt;)을 사용 할수있습니다.</p>

<p>basic.less</p>

<p>두개의 식은 같은 표현 입니다.</p>

<pre><code>.truth (@a) when (@a) { … }
.truth (@a) when (@a = true) { … }
</code></pre>

<p>example-10.less</p>

<p>아래의 식은 위에 basic.less값에 매치 되지 않습니다. 값이 'true'만 매치 됩니다.</p>

<pre><code>.class {
  .truth(40);
}
</code></pre>

<p>example-11.less</p>

<p>'or' 이중 조건은 ','로 분류 됩니다. 작성된 조건의 범위를 벗어난 값을 호출시 컴파일 자체가 되지 않습니다.</p>

<pre><code>.mixin (@a) when (@a &gt; 10), (@a &lt; -10) { … }
</code></pre>

<p>example-12.less</p>

<p>인자의 값이 동등 한지 비교 가능 하며 대,소 또한 가능 합니다.</p>

<pre><code>@media: mobile;

.mixin (@a) when (@media = mobile) { … }
.mixin (@a) when (@media = desktop) { … }

.max (@a, @b) when (@a &gt; @b) { width: @a }
.max (@a, @b) when (@a &lt; @b) { width: @b }
</code></pre>

<p>매개변수가 number 인지 color인지 비교 할수 있습니다.</p>

<pre><code>.mixin (@a, @b: 0) when (isnumber(@b)) { … }
.mixin (@a, @b: black) when (iscolor(@b)) { … }
</code></pre>

<p>확인 가능한 is*형</p>

<ul>
<li>iscolor</li>
<li>isnumber</li>
<li>isstring</li>
<li>iskeyword</li>
<li>isurl</li>
<li>ispixel</li>
<li>ispercentage</li>
<li>isem</li>
</ul>


<p>추가 조건문 and는 숫자인지 비교하고 0보다 높은 값이어야 합니다.</p>

<pre><code>.mixin (@a) when (isnumber(@a)) and (@a &gt; 0) { … }
</code></pre>

<p>부정 조건문 not 조건이 0보다 크지 않을때 동작 합니다.</p>

<pre><code>.mixin (@b) when not (@b &gt; 0) { … }
</code></pre>

<h3>조건문</h3>

<p>Less</p>

<ul>
<li>= : 두 값이 같으면 참입니다.</li>
<li>not : 두 값이 같지 않으면 참입니다.</li>
<li>and : 모든 조건이 참이어야 합니다.</li>
<li>,   : 모든 조건 값중에 하나만 참이면 참입니다.</li>
</ul>


<h3>Nested rules</h3>

<p>example-13.css</p>

<p>&amp; 콤비네이터를 사용한 상속을 통해서 간결하게 만들수 있습니다. 아래는 .css파일 입니다. 이를 .less로 바꾸어 보겠습니다.</p>

<pre><code>#header { color: black; }
#header .navigation {
  font-size: 12px;
}
#header .logo {
  width: 300px;
}
#header .logo:hover {
  text-decoration: none;
}
</code></pre>

<p>example-13-01.less</p>

<p>.css에서 반복 되던 #header를 한번만 선언 할수 있습니다.</p>

<pre><code>#header {
  color: black;

  .navigation {
    font-size: 12px;
  }
  .logo {
    width: 300px;
    &amp;:hover { text-decoration: none; }
  }
}
</code></pre>

<p>example-13-02.less</p>

<p>위와 결과는 같지만 더 간결한 문법을 보입니다.</p>

<pre><code>#header { color: black;
  .navigation { font-size: 12px }
  .logo       { width: 300px;
    &amp;:hover   { text-decoration: none }
  }  
}
</code></pre>

<p>example-14.less</p>

<p>&amp; 콤비네이터를 사용한 또다른 형태 입니다.</p>

<pre><code>.bordered {
  &amp;.float { flat: left; }
  .top {
    margin: 5px;
  }
}
</code></pre>

<p>example-14.css</p>

<pre><code>.bordered.float {
  flat: left;
}
.bordered.top {
  margin: 5px;
}
</code></pre>

<h3>Advanced Usage of &amp;</h3>

<p>example-15.less</p>

<p>&amp; 또다른 사용 법입니다. 모든 셀렉터의 조합을 만들어 줄수 있습니다.</p>

<pre><code>.child, .sibling {
  .parent &amp; {
    color: black;
  }
  &amp; + &amp; {
    color: red;
  }
}
</code></pre>

<p>example-15.css</p>

<pre><code>.parent.child, .parent.sibling {
  color: black;
}

.child + .child,
.child + .sibling,
.sibling + .child,
.sibling + .sibling {
  color: red;
}
</code></pre>

<h3>Operations</h3>

<p>example-16.less</p>

<p>숫자, 색, 변수 또한 연산을 할수 있습니다.</p>

<pre><code>@base: 5%;
@filler: (@base * 2);
@other: (@bae + @filler);

color: (#888 / 4);
background-color: (@base-color + #111);
height: (100% / 2 + @filler);
</code></pre>

<p>example-16-01.less</p>

<pre><code>@var: (1px + 5); // @var: 6px
</code></pre>

<p>example-16-02.less</p>

<pre><code>width: ((@var + 5) * 2);
</code></pre>

<h3>Color functions</h3>

<ul>
<li><p>밝기 조절</p>

<p>  lighten(@color, 10%);
  darken(@color, 10%);</p></li>
<li><p>채도 조절</p>

<p>  saturate(@color, 10%);
  desaturate(@color, 10%);</p></li>
<li><p>투명도</p>

<p>  fadein(@color, 10%);
  fadeout(@color, 10%);
  fade(@color, 50%);</p></li>
<li><p>색장 조절</p>

<p>  spin(@color, 10);
  spin(@color, -10);</p>

<h1></h1></li>
<li><p>@color1, 과 @color2 혼합된 값을 반환 합니다. @weight는 기본값을 의미 합니다.</p>

<p>  mix(@color1, @color2, @weight);</p></li>
<li><p>@color1 > 50% luma 일경우 @darkcolor 를 아니면 @lightcolor를 반환 합니다.
  contrast(@color1, @darkcolor, @lightcolor;);</p></li>
</ul>


<p>exampl1-17.less</p>

<pre><code>@base: #f04615;

.class {
  color: saturate(@base, 5%);
  background-color: spin(lighten(@base, 25%), 8);
}
</code></pre>

<p>색정보 알아내기</p>

<pre><code>hue(@color);
saturation(@color);
lightness(@color);
red(@color);
green(@color);
blue(@color);
alpha(@color);
luma(@color);
</code></pre>

<p>새로운 색 구하기</p>

<p>@new는 @old의 색을 유지하면서 자신의 채도 및 밝기를 정의</p>

<pre><code>@new: hsl(hue(@old), 45%, 90%);
</code></pre>

<h3>Math functions</h3>

<p>'2'를 반환 합니다</p>

<pre><code>round(1.67);
</code></pre>

<p>'3'을 반환 합니다.</p>

<pre><code>ceil(2.4);
</code></pre>

<p>'2'를 반환 합니다.</p>

<pre><code>floor(2.6);
</code></pre>

<p>퍼센티지 구하기</p>

<p>0.5는 50%를 반환 합니다.</p>

<pre><code>percentage(0.5)
</code></pre>

<h3>Namespaces</h3>

<p>example-18.less</p>

<p>Namespace를 가지고 Mixin 에서 선택 할수 있습니다. 다음은 #bundle 에서 .button을 Mixin 하는 방법 입니다.</p>

<pre><code>#bundle {
  .button () {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &amp;:hover { background-color: white }
  }
  .tab { … }
  .citaion { … }
}

#header a {
  color: orange;
  #bundle &gt; .button;
}
</code></pre>

<p>compile.css</p>

<p>.tab, .citaion은 적용 되지 않습니다.</p>

<pre><code>#header a {
  color: orange;
  display: black;
  border: 1px solid black;
  background-color: grey;
}
#header a:hover {
  background-color: #ffffff;
}
</code></pre>

<h3>Scope</h3>

<p>example-19.less</p>

<p>{ }안에서 변수 재선언시 지역적으로 사용 됩니다.</p>

<pre><code>@var: red;

#page {
  @var: white;
  #header {
    color: @var;
  }
}
#footer {
  color: @var;
}
</code></pre>

<h3>Comments</h3>

<p>example-20.less</p>

<p>여러줄 주석 입니다. .css 변환시 에도 남아 있게 됩니다.</p>

<pre><code>/* Hello, I'm a CSS-style comment */
.class { color: black }
</code></pre>

<p>example-21.less</p>

<p>한줄 주석입니다 .css변환시 보이지 않습니다.</p>

<pre><code>// Hi, I'm a silent comment, I won't show up in your CSS
.class { color: white }
</code></pre>

<h3>Importing</h3>

<p>example-22.less</p>

<p>기존에 만들어진 .less 파일과 .css 파일을 불러서 사용 할수 있습니다.</p>

<pre><code>@import "lib.less";
@import "lib";

@import "lib.css";
</code></pre>

<h3>String interpolation</h3>

<p>example-23.less</p>

<p>문자열을 "" 안에 불러 올수 있습니다.</p>

<pre><code>@base-url: "http://assets.fnord.com";
background-image: url("@{base-url}/images/bg.png");
</code></pre>

<h3>Selector Interpolation</h3>

<p>example-25.less</p>

<p>셀렉터 이름도 불러 올수 있습니다.</p>

<pre><code>@name: blocked;
.@{name} {
  color: black;
}
</code></pre>

<p>example-25.css</p>

<pre><code>.blocked {
  color: black;
}
</code></pre>

<h3>Escaping</h3>

<p>example-24.less</p>

<pre><code>.class {
  filter: ~"ms:alwaysHasItsOwnSyntax.For.Stuff()";
}
</code></pre>

<p>example-24.css</p>

<pre><code>.class {
  filter: ms:alwaysHasItsOwnSyntax.For.Stuff();
}
</code></pre>

<h3>JavaScript evaluation</h3>

<p>example-26.less</p>

<pre><code>@var: `"hello".toUpperCase() + '!'`;
</code></pre>

<p>compile</p>

<pre><code>@var: "HELLO!";
</code></pre>

<p>example-27.less</p>

<pre><code>@str: "hello";
@var: ~`"@{str}".toUpperCase() + '!'`;
</code></pre>

<p>compile</p>

<pre><code>@var: HELLO!;
</code></pre>

<p>JavaScript환경에 액세스 할수 있습니다.</p>

<pre><code>@height:`document.body.clientHeight`;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass 시작하기]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/15/sass-start/"/>
    <updated>2012-11-15T16:40:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/15/sass-start</id>
    <content type="html"><![CDATA[<p>Sass - Syntactically Awesome Stylesheets</p>

<h2>사용 환경</h2>

<hr />

<ul>
<li>모델명    :     MacBook Pro</li>
<li>모델 식별자:   MacBookPro8,1</li>
<li>프로세서 이름:   Intel Core i5</li>
<li>프로세서 속도:  2.3 GHz</li>
<li>메모리:           4 GB</li>
<li>기타: homebrew, iTerm</li>
</ul>


<h2>Sass 설치</h2>

<hr />

<h3>Sass 공식 사이트</h3>

<p>Sass의 공식 사이트 주소는 <a href="http://sass-lang.com/docs.html">Sass 사이트</a>입니다.</p>

<h3>gem - Sass 설치를 위한 패키지 매니저</h3>

<p>gem을 사용하려면 Ruby가 설치되어 있어야 합니다.
<a href="http://octopress.org/docs/setup/rvm/">gem 설치가이드</a></p>

<h3>RVM 패키지 설치</h3>

<p>ruby를 설치 하기전 ruby를 관리해주는 RVM 을 설치 합니다.
처음 실행 시키면 'q'를 누르라고 나옵니다.
'q' 입력후 설치 시간이 좀 걸리게 되며 아래와 같은 내용이
나올때까지 기다려야 합니다.</p>

<pre><code>$ curl -L https://get.rvm.io | bash -s stable --ruby

ruby-1.9.3-p327 - #extracting ruby-1.9.3-p327 to /Users/hancho/.rvm/src/ruby-1.9.3-p327
ruby-1.9.3-p327 - #extracted to /Users/hancho/.rvm/src/ruby-1.9.3-p327
ruby-1.9.3-p327 - #configuring
ruby-1.9.3-p327 - #compiling
ruby-1.9.3-p327 - #installing 
Removing old Rubygems files...
Installing rubygems-1.8.24 for ruby-1.9.3-p327 ...
Installation of rubygems completed successfully.
Saving wrappers to '/Users/hancho/.rvm/bin'.
ruby-1.9.3-p327 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
ruby-1.9.3-p327 - #importing default gemsets (/Users/hancho/.rvm/gemsets/)
Install of ruby-1.9.3-p327 - #complete 
Creating alias default for ruby-1.9.3-p327.
Recording alias default for ruby-1.9.3-p327.
Creating default links/files
Saving wrappers to '/Users/hancho/.rvm/bin'.

* To start using RVM you need to run `source /Users/hancho/.rvm/scripts/rvm`
in all your open shell windows, in rare cases you need to reopen all shell windows.
</code></pre>

<h3>Ruby 설치</h3>

<p>RVM이 설치가 정상적으로 완료되면 rvm 을 사용해 루비를 설치해 줍니다.</p>

<pre><code>$ rvm install 1.9.3

A RVM version 1.16.20 (stable) is installed yet 1.14.5 (stable) is loaded.
Please do one of the following:
* 'rvm reload'
* open a new shell
* 'echo rvm_auto_reload_flag=1 &gt;&gt; ~/.rvmrc' # for auto reload with msg.
* 'echo rvm_auto_reload_flag=2 &gt;&gt; ~/.rvmrc' # for silent auto reload.
</code></pre>

<h4>ruby 버전별 사용</h4>

<p>ruby 버전을 최신으로 설정해 줍니다.</p>

<pre><code>$ rvm use 1.9.3

Using /Users/hancho/.rvm/gems/ruby-1.9.3-p327
</code></pre>

<h4>ruby 최신 버전 적용</h4>

<p>현재 보다 최신 버전이 있으면 최신 버전으로 적용 시켜 주게 됩니다.
현재 사용하고 있는 버전이 최신이 아니었다면 위의 $ rvm use 1.x.x 사용
하는게 좋습니다.</p>

<pre><code>$ rvm rubygems latest

Removing old Rubygems files...
Installing rubygems-1.8.24 for ruby-1.9.3-p327 ...
Installation of rubygems completed successfully.
</code></pre>

<h3>Sass 설치</h3>

<p>RVM과 Ruby가 정상적으로 설치되면 sass를 설치 할수 있습니다.</p>

<pre><code>$ gem install sass
</code></pre>

<h2>Sass 사용방법</h2>

<ul>
<li><p>Sass 따라 해보기</p>

<p>  테스트 폴더를 생성후 style.scss 파일을 만듭니다.</p>

<pre><code> $ mkdir Sass-Start
 $ cd Sass-Start
 $ touch style.scss
</code></pre></li>
<li><p>style.scss 파일 작성</p></li>
</ul>


<p>sass가 동작 하는지 확인 하기 위해 테스트 파일를 작성합니다.</p>

<p>{% codeblock style.scss lang:css %}
.fakeshadow {
  border: {</p>

<pre><code>style: solid;
left: {
  width: 4px;
  color: #888;
}
right: {
  width: 2px;
  color: #ccc;
}
</code></pre>

<p>  }
{% endcodeblock %}</p>

<ul>
<li>.scss -> .css 변환하기</li>
</ul>


<p>작성된 .scss 파일을 .css 파일로 변환합니다. 다음은 .scss 파일이 변경
되었을시 재입력 없이 변경 되는 명령어 입니다.  .scss 파일이 변경되는
시점에(저장시) .css 변환을 자동으로 해주므로 수정 사항이 많을시 사용해
주면 좋습니다.</p>

<pre><code>$ sass --watch style.scss:style.css
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LESS 시작하기]]></title>
    <link href="http://rumidier.github.com/blog/2012/11/14/less-start/"/>
    <updated>2012-11-14T17:37:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/11/14/less-start</id>
    <content type="html"><![CDATA[<h2>LESS - The Dynamic Stylesheet Language</h2>

<h2>사용 환경</h2>

<ul>
<li>모델명    :     MacBook Pro</li>
<li>모델 식별자:   MacBookPro8,1</li>
<li>프로세서 이름:   Intel Core i5</li>
<li>프로세서 속도:  2.3 GHz</li>
<li>메모리:           4 GB</li>
<li>기타: homebrew, iTerm</li>
</ul>


<h2>LESS 설치</h2>

<h3>LESS 공식 사이트</h3>

<p>LESS의 공식 사이트 주소는 <a href="http://lesscss.org/#usage">LESS 사이트</a>입니다.</p>

<h3>npm - LESS 설치를 위한 패키지 매니저</h3>

<p>LESS를 다운 받기 위해서는 npm이 필요 하고 별도로 설치를 해주어야 하며
npm 설치를 위한 필요한 파일은 아래의 링크에서 다운로드 받을수 있습니다.</p>

<p><a href="http://nodejs.org/download/">npm 다운로드</a></p>

<h3>node-v.8.x.x.pkg 설치</h3>

<p>개인 OS에 맞는 파일을 선택하여 다운 받았다면 이를 설치 합니다. 다음은 Mac 에서의
.pkg 실행시 첫화면과 마지막 화면 입니다.</p>

<p>{% img https://lh5.googleusercontent.com/-eUicOa-fhtQ/UKXCFOGz27I/AAAAAAAAACE/9LBj6Kzdn-8/%25252FUsers%25252Fhancho%25252FPictures%25252Fnode-01.jpg 500 500 "node.pkg 설치 시작" %}
{% img https://lh5.googleusercontent.com/-Smr4TJfxMgI/UKXEkWDOYWI/AAAAAAAAACM/soEN5qpthGg/%25252FUsers%25252Fhancho%25252FPictures%25252Fnode-02.jpg 500 500 "node.pkg 설치 끝" %}</p>

<h3>LESS 설치</h3>

<p>정상적으로 패키지 설치가 완료 되면 npm을 사용해 LESS를 설치 합니다.</p>

<pre><code>$ npm install -g less
</code></pre>

<h2>LESS 사용방법</h2>

<ul>
<li><p>LESS 시작하기</p>

<p>  테스트 폴더를 생성하고 style.less 파일을 만듭니다.</p>

<pre><code> $ mkdir Less-Start
 $ cd Less-Start
 $ touch style.less
</code></pre></li>
<li><p>style.less 작성</p></li>
</ul>


<p>less가 동작하는지 확인 하기 위한 테스트 파일를 작성합니다.</p>

<p>{% codeblock style.less lang:css %}
  @color: #4D926F;</p>

<p>  #header {</p>

<pre><code>color: @color;
</code></pre>

<p>  }
  h2 {</p>

<pre><code>color: @color;
</code></pre>

<p>  }
{% endcodeblock %}</p>

<ul>
<li><p>.less -> .css 미리보기</p>

<p>  .less 작성후 변환하기전 .css 미리 보기를 할수 있습니다.</p>

<pre><code> $ lessc styles.less

 #header {
   color: #6cc4be;
 }
</code></pre></li>
<li><p>.less -> .css 변환하기</p>

<p>  작성이 완료되면 .less 파일을 .css 파일로 변환하여 줍니다.</p>

<pre><code> $ lessc styles.less &gt; styles.css
 $ ls

 styles.less styles css
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
