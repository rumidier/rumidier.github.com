<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Catalyst | Meadows of wild horses]]></title>
  <link href="http://rumidier.github.com/blog/categories/catalyst/atom.xml" rel="self"/>
  <link href="http://rumidier.github.com/"/>
  <updated>2012-11-15T16:42:55+09:00</updated>
  <id>http://rumidier.github.com/</id>
  <author>
    <name><![CDATA[rumidier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Net::Twitter]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/24/net-twitter/"/>
    <updated>2012-09-24T18:06:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/24/net-twitter</id>
    <content type="html"><![CDATA[<p>Net::Twitter 설치시 실패</p>

<p>서버에 모듈을 설치 하려고 하는데 자꾸 실패 하게 되었다.
ssl도 있고 Dev도 있는데 왜??
그건 libssl-dev가 없어서 였다</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst-test-code]]></title>
    <link href="http://rumidier.github.com/blog/2012/09/11/catalyst-test-code/"/>
    <updated>2012-09-11T18:46:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/09/11/catalyst-test-code</id>
    <content type="html"><![CDATA[<h2>Web - Catalyst Test Code 작성</h2>

<p>Catalyst로 웹을 구축 하던중 테스트 코드를 작성을 부여 받았습니다. 테스트 코드를 진행 하기 위한 모듈을 적습니다.</p>

<h2>모듈</h2>

<p><a href="https://metacpan.org/module/Test::More">Test::More</a></p>

<p>기본 적이 펄 테스트 코드 문법을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/Catalyst::Test#res-request-...-">Catalyst::Test</a></p>

<p>content, response 페이지 정보를 얻어 올수 있습니다.</p>

<p><a href="ihttps://metacpan.org/module/HTTP::Response">HTTP::Response</a></p>

<p>response 정보등을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/URI">URI</a></p>

<p>response 정보등을 확인 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/HTTP::Request::Common">HTTP::Request::Common</a></p>

<p>Get POST 등을 구현 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/CGI::Simple::Cookie">CGI::Simple::Cookie</a></p>

<p>로그인 인증 관련 세션 처리를 할수 있습니다.</p>

<p><a href="https://metacpan.org/module/HTTP::Cookies">HTTP::Cookies</a></p>

<p>CGI::Simple::Cookie로 쿠키 관련 재설정이 반복 되며 번거로울때
파일로 저장하여 사용할수 있다.</p>

<pre><code>## 첫번째 t 파일에서 login 하고 cookie 를 저장해둔다. pull/109설명중.
my $cookies = HTTP::Cookies-&gt;new(file =&gt; 't/.cookies');
# res &amp; res
$cookies-&gt;extract_cookies($res);
$cookies-&gt;save;

## 다른 t 파일에서는..
my $cookies = (split(/:/, HTTP::Cookies-&gt;new(file =&gt; 't/.cookies')-&gt;as_string))[1];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DB_Password_Hash]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/25/db-password-hash/"/>
    <updated>2012-07-25T16:41:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/25/db-password-hash</id>
    <content type="html"><![CDATA[<h2>DB Password HASH</h2>

<p><a href="https://metacpan.org/module/DBIx::Class::EncodedColumn">DBIx::Class::EncodedColumn</a></p>

<p>기본 입력값 입력시 sha('password')사용 하여 암호화 할수 있도록 한다.</p>

<p><code>
INSERT INTO `user` VALUES (2,'rum_user','rum_user@mail.com',sha('Password'),localtime ,localtime);
</code></p>

<p>MyWeb::ResultBase.pm에 EncodedColumn 추가하여 준다.</p>

<p>```
<strong>PACKAGE</strong>->load_components(qw/</p>

<pre><code>EncodedColumn
InflateColumn::DateTime
TimeStamp
</code></pre>

<p>/);
```</p>

<p><a href="https://metacpan.org/module/Catalyst::Plugin::Authentication">Catalyst::Plugin::Authentication</a></p>

<p>my_web.conf 파일에 플러그인 설정 추가
pawword_type 설정시 디폴트로 SHA-1이 적용되지만
명시적으로 password_hash_type을 정의 하여 준다.</p>

<p>```
&lt;Plugin::Authentication></p>

<pre><code>&lt;default&gt;
    password_type      hashed
    password_hash_type SHA-1
    user_model         DonDB::User
    class              SimpleDB
&lt;/default&gt;
</code></pre>

<p>&lt;/Plugin::Authentication>
```</p>

<h3>설정 추가 참고 자료</h3>

<p><a href="https://metacpan.org/module/Catalyst::Authentication::Credential::Password">Catalyst::Authentication::Credential::Password</a></p>

<p><a href="https://metacpan.org/module/Digest#new">Digest</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don-Change-space]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/24/don-change-space/"/>
    <updated>2012-07-24T14:20:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/24/don-change-space</id>
    <content type="html"><![CDATA[<h2>Sil::Web::Don 변경</h2>

<p>Sil::Schema는 Sil의 공용 스키마가 아닌데도 불구 하고 그렇게 보일수도 있는
상태 이다 이를 바꾸기 위해서
Sil::Don::Schema로 바꾼다. 이는 Sil의 Don만의 스키마라고
명시 해주는것과 같다.</p>

<p>변경전
<code>``
lib
</code>-- Sil</p>

<pre><code>|-- Schema
|   |-- Result
|   |   |-- Charge.pm
|   |   `-- User.pm
|   `-- ResultBase.pm
|-- Schema.pm
`-- Web
    |-- Don
    |   |-- Controller
    |   |   |-- Deposit.pm
    |   |   |-- List.pm
    |   |   |-- Login.pm
    |   |   |-- Logout.pm
    |   |   `-- Root.pm
    |   |-- Model
    |   |   `-- DonDB.pm
    |   `-- View
    |       |-- Bootstrap.pm
    |       `-- Download
    |           `-- CSV.pm
    `-- Don.pm
</code></pre>

<p>```</p>

<p> 변경후
```
 lib
└── Sil</p>

<pre><code>└── Don
    ├── Schema
    │   ├── Result
    │   │   ├── Charge.pm
    │   │   └── User.pm
    │   └── ResultBase.pm
    ├── Schema.pm
    ├── Web
    │   ├── Controller
    │   │   ├── Deposit.pm
    │   │   ├── List.pm
    │   │   ├── Login.pm
    │   │   ├── Logout.pm
    │   │   └── Root.pm
    │   ├── Model
    │   │   └── DonDB.pm
    │   └── View
    │       ├── Bootstrap.pm
    │       └── Download
    │           └── CSV.pm
    └── Web.pm
</code></pre>

<p>```</p>

<h2>경로명 변경</h2>

<p>의존성이 걸려있는 모든 내역들을 grep 명령어로 찾아 아래와 같이 수정해 주었다.</p>

<p>변경전</p>

<p>```
Sil::Schema::Result::Charge
Sil::Schema::Result::User
Sil::Schema::ResultBase
Sil::Schema</p>

<p>Sil::Web::Don::Controller::Deposit
Sil::Web::Don::Controller::List
Sil::Web::Don::Controller::Login
Sil::Web::Don::Controller::Logout
Sil::Web::Don::Controller::Root
Sil::Web::Don::Model::DonDB
Sil::Web::Don::View::Bootstrap
Sil::Web::Don::View::Download::CS
Sil::Web::Don
```</p>

<p>변경후</p>

<p>```
Sil::Don::Schema::Result::Charge
Sil::Don::Schema::Result::User
Sil::Don::Schema::ResultBase
Sil::Don::Schema</p>

<p>Sil::Don::Web::Controller::Deposit
Sil::Don::Web::Controller::List
Sil::Don::Web::Controller::Login
Sil::Don::Web::Controller::Logout
Sil::Don::Web::Controller::Root
Sil::Don::Web::Model::DonDB
Sil::Don::Web::View::Bootstrap
Sil::Don::Web::View::Download::CS
Sil::Don::Web
```</p>

<h2>변경후 문제점</h2>

<p>내용 수정후 서버 실행이 app.psgi에서 모듈을 찾지 못한다고 하였다.
이유는 Sil_web_Don.conf 파일명을 수정 해주지 않았기에 발생한 문제였다.
경로명이 바뀌엇듯이 파일명도 교체 해주어야 한다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side-function]]></title>
    <link href="http://rumidier.github.com/blog/2012/07/12/side-function/"/>
    <updated>2012-07-12T14:03:00+09:00</updated>
    <id>http://rumidier.github.com/blog/2012/07/12/side-function</id>
    <content type="html"><![CDATA[<h2>Action - approval, refuse</h2>

<p><a href="https://gist.github.com/3096325">approval</a></p>

<p><a href="https://gist.github.com/3096321">refuse</a></p>

<p>Approval은 청구 목록에 대하여 승인 기능을
refuse는 청구 목렉에 대하여 거부 기능을 가지게 된다.</p>

<p>승인 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기 리스트 상태, 거부 리스트 상태
에서 활성화가 되고 action을 취할수 있게 한다.</p>

<p>거부 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기 리스트 상태, 승인 리스트 상태
에서 활성화가 되고 action 을 취할수 있게 한다.</p>

<p>/list/view/user_id</p>

<p>아래와 같이 id 값과 함께 전달 할수 있다.</p>

<pre><code>&lt;a href="[% c.uri_for('/list/approval', charge.id) %]" class="btn btn-primary"&gt;승인&lt;/a&gt;
&lt;a href="[% c.uri_for('/list/refuse', charge.id) %]" class="btn btn-primary"&gt;거부&lt;/a&gt;
</code></pre>

<p>CaputreArgs(1) 옵션으로 $id 값(들)을 받을수 있게 된다.</p>

<pre><code>sub approval :Local :CaptureArgs(1) {
    my ( $self, $c, $id ) = @_;
    my @target_ids = split ',', $id;

sub refuse :Local :CaptureArgs(1) {
my ( $self, $c, $id ) = @_;
my @target_ids = split ',', $id;
</code></pre>

<p>@target_id의 모든 값(들)을 status값이 2 or 3로 업데이트 한다.
업데이트는 검색을 한 값들을 대상으로 update를 하게 된다.</p>

<pre><code>$ vi root/templates/default/src/list

# 승인
my $approval = $c-&gt;model('MyApp_DB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in
        =&gt; \@target_ids } })-&gt;update_all({ status =&gt; '2' });
# 거부
my $refuse = $c-&gt;model('MyApp_DB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in
        =&gt; \@target_ids } })-&gt;update_all({ status =&gt; '3' });
</code></pre>

<p>flash기능으로 messages값을 전달하여 조건에 맞을시 메세지를 출력 시키도록 한다.(/list/index.tt 참고)
조건은 approval, refuse기능이 정상 작동 되었는지를 검사 하게 된다.</p>

<pre><code>if ($query_status) {
    $c-&gt;flash-&gt;{messages} = 'Success message.';
}
else {
    $c-&gt;flash-&gt;{messages} = 'No status Item.';
}
</code></pre>

<p>템플릿에 쓰일 status값과 함께 전체 목록으로 redirect 시키도록 한다.</p>

<pre><code>$c-&gt;stash-&gt;{status} = '2'; #상태에 맞는 status값
$c-&gt;res-&gt;redirect($c-&gt;uri_for('/list'));
</code></pre>

<h2>Action - delete</h2>

<p><a href="https://gist.github.com/3096329">delete</a></p>

<p>승인 기능은 두가지 상황에서 선택 할수 있게 된다.
/list/view/user_num과 전체 list상태, 대기, 거부, 수정 상태
 에서 활성화가 되고 action을 취할수 있게 한다.</p>

<pre><code>$ vi root/templates/default/src/list
&lt;a href="[% c.uri_for('/list/delete', charge.id) %]" class="btn btn-primary"&gt;삭제&lt;/a&gt;
</code></pre>

<p>다른 기능과 같이 CaptureArgs(1)를 받는다.</p>

<pre><code>sub delete :Local :CaptureArgs(1) {
my ( $self, $c, $id ) = @_;
my @target_ids = split ',', $id;
</code></pre>

<p>다른 기능과 달리 update_all 이 아닌 delete_all를 통하여 내용을 삭제 한다.</p>

<pre><code>my $charge = $c-&gt;model('DonDB')-&gt;resultset('Charge')-&gt;search({ id =&gt; { -in =&gt; \@target_ids } })-&gt;delete_all;
</code></pre>

<h2>CPAN</h2>

<p><a href="https://metacpan.org/module/DBIx::Class::Manual::DocMap">DBIx::Class::Manual::DocMap</a></p>
]]></content>
  </entry>
  
</feed>
